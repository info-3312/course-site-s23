{
  "hash": "ea3c10559ae817b718507aafb2589268",
  "result": {
    "markdown": "---\ntitle: \"Data wrangling (II)\"\nsubtitle: \"Lecture 8\"\ndate: \"February 16, 2023\"\nformat: revealjs\nresources:\n  - \"data/prognosticators.csv\"\n  - \"data/weather-region.csv\"\n---\n\n\n\n\n# Announcements\n\n## Announcements\n\n- Draft proposal rendered + committed + pushed to GitHub by 11:59pm tonight\n- Peer evaluations in lab tomorrow\n- Homework 2 distributed tomorrow\n\n:::: columns\n\n::: {.column .fragment width=\"50%\"}\n\n**Option A**\n\n- Homework due next Wednesday\n- Grades and feedback likely before February Break\n- **Some methods you need for the assignment will be taught next Tuesday**\n\n:::\n\n::: {.column .fragment width=\"50%\"}\n\n**Option B**\n\n- Homework due next Friday\n- Grades and feedback **after** February Break (and probably after project \\#1)\n\n:::\n\n::::\n\n## Agenda for today\n\n- Transforming and reshaping a single data frame\n- Transforming and reshaping multiple data frames\n\n# Setup\n\n## Packages + figures\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)\nlibrary(scales)\n\n# set default theme for ggplot2\ntheme_set(theme_minimal(base_size = 12))\n```\n:::\n\n\n### YAML options\n\n```yaml\nknitr:\n  opts_chunk:\n    fig.width: 7\n    fig.asp: 0.618\n    fig.retina: 2\n    dpi: 150\n    out.width: \"80%\"\n```\n\n# From last time\n\n## Data: SCOTUS\n\n-   Data from the Supreme Court of the United States\n-   Source: [Supreme Court Database](http://scdb.wustl.edu/)\n-   Observations: Each row represents a case\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/unnamed-chunk-3_e7fe02cb8faf949da2e381e26f619b6e'}\n\n```{.r .cell-code}\nscdb_case <- read_csv(\"https://info3312.infosci.cornell.edu/slides/data/scdb-case.csv\")\n```\n:::\n\n\n\n\n## Scenario 1\n\n::: hand\nWe...\n\nhave a single data frame\n\nwant to slice it, and dice it, and juice it, and process it, so we can plot it\n:::\n\n## What percentage of cases in each term are decided by an **n**-vote margin (i.e. 5-4, 6-3, etc.)\n\n::: task\nLet's recreate this visualization!\n:::\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/n-vote-margin_184b0fe4d4259dd67062a4fa6d0a5fab'}\n::: {.cell-output-display}\n![](08-data-wrangling-ii_files/figure-revealjs/n-vote-margin-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Livecoding\n\nReveal below for code developed during live coding session.\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/unnamed-chunk-6_874c389ed1eaf8ee55d4e125e6c4dff4'}\n\n```{.r .cell-code  code-fold=\"true\"}\nscdb_case |>\n  # select relevant columns\n  select(term, majVotes, minVotes) |>\n  # filter to include post 1945 term cases\n  filter(term >= 1945) |>\n  # calculate vote margin for each case\n  mutate(vote_margin = majVotes - minVotes) |>\n  # calculate number of cases decided per term and vote margin\n  count(term, vote_margin) |>\n  # fill in all the missing combination of rows - plot won't look right otherwise\n  complete(term, vote_margin, fill = list(n = 0)) |>\n  # calculate percentages by term\n  group_by(term) |>\n  mutate(\n    n_pct = n / sum(n),\n    # convert vote_margin to factor variable for plotting\n    vote_margin = factor(x = vote_margin),\n    vote_margin = fct_rev(f = vote_margin)\n  ) |>\n  # generate graph\n  ggplot(mapping = aes(x = term, y = n_pct, fill = vote_margin)) +\n  geom_area(color = \"cornsilk4\") +\n  # print the y-axis labels using percentages rather than proportions\n  scale_y_continuous(labels = label_percent()) +\n  # change the color palette\n  scale_fill_viridis_d() +\n  # label our graph\n  labs(\n    title = \"U.S. Supreme Court decisionmaking since 1945\",\n    subtitle = \"Split between majority and minority justice votes\",\n    x = \"Term\",\n    y = \"Percent of total cases decided\",\n    fill = \"Vote margin\",\n    caption = \"Source: The Supreme Court Database\"\n  ) +\n  # match subtitle and caption colors to area borders\n  theme(\n    plot.subtitle = element_text(color = \"cornsilk4\"),\n    plot.caption = element_text(color = \"cornsilk4\")\n  )\n```\n:::\n\n\n# Bringing together multiple data frames\n\n## Scenario 2\n\n::: hand\nWe...\n\nhave **multiple** data frames\n\nwant to want to bring them together so we can plot them\n:::\n\n## Introduction to relational data\n\n* Multiple tables of data that when combined together answer research questions\n* Relations define the important element, not just the individual tables\n* Relations are defined between a pair of tables\n* Relational verbs\n    * Mutating joins\n    * Filtering joins\n\n---\n\n![](https://www.hindustantimes.com/rf/image_size_960x540/HT/p2/2018/02/08/Pictures/_33b2ca74-0cc1-11e8-ba67-a8387f729390.jpeg){fig-align=\"center\"}\n\n---\n\n\n::: {.cell layout-align=\"center\" output-location='column' hash='08-data-wrangling-ii_cache/revealjs/unnamed-chunk-7_3a37a5b3e779cc5f05020ce1c216da3f'}\n\n```{.r .cell-code}\nsuperheroes <- tribble(\n  ~name, ~alignment, ~gender, ~publisher,\n  \"Magneto\", \"bad\", \"male\", \"Marvel\",\n  \"Batman\", \"good\", \"male\", \"DC\",\n  \"Sabrina\", \"good\", \"female\", \"Archie Comics\"\n)\n\npublishers <- tribble(\n  ~publisher, ~yr_founded,\n  \"DC\", 1934,\n  \"Marvel\", 1939,\n  \"Image\", 1992\n)\n\nsuperheroes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  name    alignment gender publisher    \n  <chr>   <chr>     <chr>  <chr>        \n1 Magneto bad       male   Marvel       \n2 Batman  good      male   DC           \n3 Sabrina good      female Archie Comics\n```\n:::\n\n```{.r .cell-code}\npublishers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  publisher yr_founded\n  <chr>          <dbl>\n1 DC              1934\n2 Marvel          1939\n3 Image           1992\n```\n:::\n:::\n\n\n\n\n\n\n# Mutating joins\n\n## `inner_join()`\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/ijsp-anim_60ac69b6547b45bc801d70694725b9ce'}\n::: {.cell-output-display}\n![](08-data-wrangling-ii_files/figure-revealjs/ijsp-anim-1.gif){fig-align='center' width=80%}\n:::\n:::\n\n\n## `inner_join()`\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/ijsp_bfa85a3ea4fe593dabbb5863a827cd6b'}\n\n```{.r .cell-code}\ninner_join(x = superheroes, y = publishers, by = \"publisher\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  name    alignment gender publisher yr_founded\n  <chr>   <chr>     <chr>  <chr>          <dbl>\n1 Magneto bad       male   Marvel          1939\n2 Batman  good      male   DC              1934\n```\n:::\n:::\n\n\n## `left_join()`\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/ljsp-anim_b1f4dfb179dce161ee9dbef8cfc50576'}\n::: {.cell-output-display}\n![](08-data-wrangling-ii_files/figure-revealjs/ljsp-anim-1.gif){fig-align='center' width=80%}\n:::\n:::\n\n\n## `left_join()`\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/ljsp_b9535d6dafd89ab88d04714a9dcbc43c'}\n\n```{.r .cell-code}\nleft_join(x = superheroes, y = publishers, by = \"publisher\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  name    alignment gender publisher     yr_founded\n  <chr>   <chr>     <chr>  <chr>              <dbl>\n1 Magneto bad       male   Marvel              1939\n2 Batman  good      male   DC                  1934\n3 Sabrina good      female Archie Comics         NA\n```\n:::\n:::\n\n\n## `right_join()`\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/rjsp-anim_6abf91783e7dcf650aa1dc71982e9b6f'}\n::: {.cell-output-display}\n![](08-data-wrangling-ii_files/figure-revealjs/rjsp-anim-1.gif){fig-align='center' width=80%}\n:::\n:::\n\n\n## `right_join()`\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/rjsp_badf5e7f4c6a758c7a0e072cf46bc2b8'}\n\n```{.r .cell-code}\nright_join(x = superheroes, y = publishers, by = \"publisher\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  name    alignment gender publisher yr_founded\n  <chr>   <chr>     <chr>  <chr>          <dbl>\n1 Magneto bad       male   Marvel          1939\n2 Batman  good      male   DC              1934\n3 <NA>    <NA>      <NA>   Image           1992\n```\n:::\n:::\n\n\n## `right_join()` reversed\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/rjsp-alt-anim_1de0450940a4d5d79463a2864a1251ee'}\n::: {.cell-output-display}\n![](08-data-wrangling-ii_files/figure-revealjs/rjsp-alt-anim-1.gif){fig-align='center' width=80%}\n:::\n:::\n\n\n## `full_join()`\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/fjsp-anim_c90467b8a5ea25ed865aca043abb6dcf'}\n::: {.cell-output-display}\n![](08-data-wrangling-ii_files/figure-revealjs/fjsp-anim-1.gif){fig-align='center' width=80%}\n:::\n:::\n\n\n## `full_join()`\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/fjsp_97c21f5194772147d42fcfc10e0d9e8c'}\n\n```{.r .cell-code}\nfull_join(x = superheroes, y = publishers, by = \"publisher\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 5\n  name    alignment gender publisher     yr_founded\n  <chr>   <chr>     <chr>  <chr>              <dbl>\n1 Magneto bad       male   Marvel              1939\n2 Batman  good      male   DC                  1934\n3 Sabrina good      female Archie Comics         NA\n4 <NA>    <NA>      <NA>   Image               1992\n```\n:::\n:::\n\n\n# Filtering joins\n\n## `semi_join()`\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/sjsp-anim_9f190fa28aa80aecea8b7b61a738fba8'}\n::: {.cell-output-display}\n![](08-data-wrangling-ii_files/figure-revealjs/sjsp-anim-1.gif){fig-align='center' width=80%}\n:::\n:::\n\n\n## `semi_join()`\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/sjsp_0502a31efdd55c8b543cfdf3e4673d3f'}\n\n```{.r .cell-code}\nsemi_join(x = superheroes, y = publishers, by = \"publisher\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  name    alignment gender publisher\n  <chr>   <chr>     <chr>  <chr>    \n1 Magneto bad       male   Marvel   \n2 Batman  good      male   DC       \n```\n:::\n:::\n\n\n## `anti_join()`\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/ajsp-anim_e729777eaab81aebfa075c5407c80d2e'}\n::: {.cell-output-display}\n![](08-data-wrangling-ii_files/figure-revealjs/ajsp-anim-1.gif){fig-align='center' width=80%}\n:::\n:::\n\n\n## `anti_join()`\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/ajsp_5e130a05b118a393ff786d89c1f57dec'}\n\n```{.r .cell-code}\nanti_join(x = superheroes, y = publishers, by = \"publisher\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  name    alignment gender publisher    \n  <chr>   <chr>     <chr>  <chr>        \n1 Sabrina good      female Archie Comics\n```\n:::\n:::\n\n\n## Assessing prognosticator performance\n\n![](https://media.giphy.com/media/j66bdOePN0JtBuqYn4/giphy.gif){fig-align=\"center\"}\n\n## The prognosticator of all prognosticators\n\n\n{{< video https://www.youtube.com/embed/iDs12Qd27R8 width=\"1456\" height=\"819\" >}}\n\n\n\n## Import the data\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/unnamed-chunk-23_71d76f7f1b982ebfed301532626737d2'}\n\n```{.r .cell-code}\nseers <- read_csv(\"https://info3312.infosci.cornell.edu/slides/data/prognosticators.csv\")\nweather <- read_csv(\"https://info3312.infosci.cornell.edu/slides/data/weather-region.csv\")\n```\n:::\n\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/seers-glimpse_c411946e9832b53ecdd657e799b8502a'}\n\n```{.r .cell-code}\nglimpse(seers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,457\nColumns: 7\n$ name            <chr> \"Punxsutawney Phil\", \"Punxsutawney Phil\", \"Punxsutawne…\n$ forecaster_type <chr> \"Groundhog\", \"Groundhog\", \"Groundhog\", \"Groundhog\", \"G…\n$ alive           <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, …\n$ town            <chr> \"Punxsutawney\", \"Punxsutawney\", \"Punxsutawney\", \"Punxs…\n$ state           <chr> \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", \"PA\", …\n$ year            <dbl> 2022, 2021, 2020, 2019, 2018, 2017, 2016, 2015, 2014, …\n$ prediction      <chr> \"Long Winter\", \"Long Winter\", \"Early Spring\", \"Early S…\n```\n:::\n\n```{.r .cell-code}\nglimpse(weather)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,424\nColumns: 13\n$ region         <chr> \"Northeast\", \"Northeast\", \"Northeast\", \"Northeast\", \"No…\n$ state_abb      <chr> \"CT\", \"CT\", \"CT\", \"CT\", \"CT\", \"CT\", \"CT\", \"CT\", \"CT\", \"…\n$ id             <dbl> 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, …\n$ year           <dbl> 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1…\n$ avg_temp       <dbl> 28.00, 29.20, 24.90, 23.15, 28.05, 22.05, 27.50, 21.55,…\n$ temp_hist      <dbl> 25.58333, 26.09000, 26.16667, 25.85667, 25.63333, 25.52…\n$ temp_hist_sd   <dbl> 4.245360, 4.241218, 4.103158, 4.124311, 3.907804, 4.016…\n$ temp_sd        <dbl> 4.118598, 4.118598, 4.118598, 4.118598, 4.118598, 4.118…\n$ precip         <dbl> 4.005, 2.520, 2.810, 3.570, 3.765, 2.920, 2.330, 3.425,…\n$ precip_hist    <dbl> 3.476667, 3.526667, 3.378000, 3.411000, 3.446333, 3.352…\n$ precip_hist_sd <dbl> 1.1784719, 1.2081292, 1.1442431, 1.1620681, 1.2039309, …\n$ precip_sd      <dbl> 0.9641827, 0.9641827, 0.9641827, 0.9641827, 0.9641827, …\n$ outcome        <chr> \"Early Spring\", \"Early Spring\", \"Early Spring\", \"Late W…\n```\n:::\n:::\n\n\n---\n\n![](images/08/climate-regions.gif){fig-alt=\"The nine regions as defined by the National Climatic Data Center and regularly used in climate summaries.\" fig-align=\"center\"}\n\n## Prognosticator accuracy rates\n\n::: task\nLet's recreate this visualization!\n:::\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/seers-accuracy-rate_aa4a342f600a7c348052942754363bad'}\n::: {.cell-output-display}\n![](08-data-wrangling-ii_files/figure-revealjs/seers-accuracy-rate-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Livecoding\n\nReveal below for code developed during live coding session.\n\n\n::: {.cell layout-align=\"center\" hash='08-data-wrangling-ii_cache/revealjs/unnamed-chunk-27_c2afe691e0879dd5b1f2d6dae31b6859'}\n\n```{.r .cell-code  code-fold=\"true\"}\n# join the data frames\nseers_weather <- inner_join(\n  x = seers, y = weather,\n  by = c(\"state\" = \"state_abb\", \"year\")\n) |>\n  # calculate if prediction was correct\n  mutate(correct_pred = prediction == outcome)\n\n# calculate summary statistics\nseers_summary <- seers_weather |>\n  group_by(region) |>\n  summarize(\n    preds_rate = mean(correct_pred),\n    preds_n = n(),\n    preds_se = sqrt((preds_rate * (1 - preds_rate)) / preds_n)\n  )\n\n# generate the plot\nseers_summary |>\n  mutate(region = fct_reorder(.f = region, .x = preds_rate)) |>\n  ggplot(mapping = aes(x = preds_rate, y = region)) +\n  geom_point(mapping = aes(size = preds_n)) +\n  geom_linerange(mapping = aes(xmin = preds_rate - preds_se,\n                               xmax = preds_rate + preds_se)) +\n  scale_x_continuous(labels = label_percent()) +\n  labs(\n    title = \"Prognosticator accuracy rate for late winter/early spring\",\n    subtitle = \"By climate region\",\n    x = \"Prediction accuracy\",\n    y = NULL,\n    size = \"Total number\\nof predictions\",\n    caption = \"Source: Countdown to Groundhog Day & NOAA\"\n  ) +\n  theme_minimal()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}