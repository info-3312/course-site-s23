{
  "hash": "9b7c8b95e84d9050b7d790426f9558eb",
  "result": {
    "markdown": "---\ntitle: \"Homework 1\"\ncategories: \"Homework\"\neditor: visual\n---\n\n\n::: callout-important\nThis homework is due Wednesday, February 8 at 11:59pm ET.\n:::\n\n# Getting started\n\n-   Go to the [**info3312-s23**](https://github.coecis.cornell.edu/info3312-s23) organization on GitHub. Click on the repo with the prefix **hw-01**. It contains the starter documents you need to complete the lab.\n\n-   Clone the repo and start a new project in RStudio. See the [Lab 0 instructions](https://info3312.infosci.cornell.edu/labs/lab-00.html#clone-the-repo-start-new-rstudio-project) for details on cloning a repo and starting a new R project.\n\n## Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## Guidelines + tips\n\nAs we've discussed in lecture, your plots should include an informative title, axes should be labeled, and careful consideration should be given to aesthetic choices.\n\nRemember that continuing to develop a sound workflow for reproducible data analysis is important as you complete this homework and other assignments in this course. There will be periodic reminders in this assignment to remind you to knit, commit, and push your changes to GitHub. You should have **at least 3 commits with meaningful commit messages** by the end of the assignment.\n\n::: callout-note\nNote: Do not let R output answer the question for you unless the question specifically asks for just a plot. For example, if the question asks for the number of columns in the data set, please type out the number of columns. You are subject to lose points if you do not.\n:::\n\n## Workflow + formatting\n\nMake sure to\n\n-   Update author name on your document.\n-   Label all code chunks informatively and concisely.\n-   Follow the [Tidyverse code style guidelines](https://style.tidyverse.org/).\n-   Make at least 3 commits.\n-   Resize figures where needed, avoid tiny or huge plots.\n-   Turn in an organized, well formatted document.\n\n## Exercise 1\n\n**Reverse-engineering the grammar of graphics.** COVID-19 has been a thing for the past 2+ years. Data visualizations have proven extremely valuable for communicating trends regarding the pandemic to the public. For the main plot in [this article](https://www.axios.com/coronavirus-cases-testing-growth-62d6256b-33e2-491d-b94e-91110a74bc85.html), write down the components of its grammar of graphic. Don't worry about identifying the correct functions in `ggplot2` used to generate the graph. Instead, focus on recording the key elements of a plot so you could communicate it to someone else.\n\n::: render-commit-push\nNow is a good time to render, commit, and push. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding. <br>\n:::\n\n## Exercise 2\n\n**Road traffic accidents in Edinburgh.** Next we'll look at traffic accidents in Edinburgh. The data are made available [online](https://www.gov.uk/government/collections/road-traffic-statistics) by the UK Government. It covers all recorded accidents in Edinburgh in 2018 and some of the variables were modified for the purposes of this assignment. The data can be found in the **dsbox** package, and it's called `accidents`. You can find out more about the dataset by inspecting its documentation with `?accidents` and you can also find this information [here](https://rstudio-education.github.io/dsbox/reference/accidents.html).\n\nRecreate the following plot, and interpret in context of the data.\n\n![](01/accidents.png){fig-alt=\"Recreation of the required plot for exercise 2.\"}\n\n::: render-commit-push\nNow is a good time to render, commit, and push. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding. <br>\n:::\n\n## Exercise 3\n\n**NYC marathon winners.** The New York City Marathon is an annual marathon that courses through the five boroughs of New York City. Marathon times of runners in the Men and Women divisions of the New York City Marathon between 1970 and 2020 can be found in the `nyc_marathon` dataset in the **openintro** package. You can find out more about the dataset by inspecting its documentation with `?nyc_marathon` and you can also find this information [here](http://openintrostat.github.io/openintro/reference/nyc_marathon.html).\n\na.  Create a histogram and a box plot of the distribution of marathon times of all runners in the dataset. What features of the distribution are apparent in the histogram and not the box plot? What features are apparent in the box plot but not in the histogram?\n\nb.  Create a side-by-side box plots of marathon times for men and women. Use different colors for the each of the box plots -- do not use the default colors, but instead manually define them (you can choose any two colors you want). Based on the plots you made, compare the distribution of marathon times for men and women.\n\nc.  What information in the above plot is redundant? Redo the plot avoiding this redundancy. How does this update change the data-to-ink ratio?\n\nd.  Visualize the marathon times of men and women over the years. As is usual with time series plot, year should go on the x-axis. Use different colors and shapes to represent the times for men and women. Make sure your colors match those in the previous part. Once you have your plot, describe what is visible in this plot but not in the others.\n\n::: render-commit-push\nNow is a good time to render, commit, and push. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding. <br>\n:::\n\n## Exercise 4\n\n**US counties.** The following questions use the `county` dataset in the **openintro** package. You can find out more about the dataset by inspecting its documentation with `?county` and you can also find this information [here](https://openintrostat.github.io/usdata/reference/county.html).\n\na.  What does the following code do? Does it work? Does it make sense? Why/why not?\n\n    ``` r\n    ggplot(county) +\n      geom_point(aes(x = median_edu, y = median_hh_income)) +\n      geom_boxplot(aes(x = smoking_ban, y = pop2017))\n    ```\n\nb.  Recreate the R code necessary to generate the following graphs. You will need to create 8 separate plots for this exercise. Note that wherever a categorical variable is used in the plot, it's `metro`.\n\n![](01/plots-recreation.png){fig-alt=\"Recreation of the required plot for exercise 4(b).\"}\n\n::: render-commit-push\nNow is a good time to render, commit, and push. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding. <br>\n:::\n\n## Exercise 5\n\n**Napoleon's march.** The instructions for this exercise are simple: recreate the Napoleon's march plot by Charles John Minard in **ggplot2.** The data is provided as a list, saved as `napoleon.rds`.\n\nRead it in using `read_rds()`. This object has three elements: `cities`, `temperatures`, and `troops`. Each of these is a data frame, and the three of them combined contain all of the data you need to recreate the visualization. Your goal isn't to create an exact replica of the original plot, but to get as close to it as you can using code you understand and can describe articulately in your response.\n\nI'll be the first to say that if you Google \"Napoleon's march in **ggplot2**\", you'll find a bunch of blog posts, tutorials, etc. that walk you through how to recreate this visualization with **ggplot2.** So you might be thinking, \"why am I being asked to copy something off the internet for my homework?\" Well, this is an exercise in (1) working with web resources and citing them properly, (2) understanding someone else's **ggplot2** code and reproducing their work, (3) describing what that code does in your own words, and finally (4) putting some final touches to make the final product your own. Some more guidelines below:\n\n-   You should make sure your response properly cites all of the resources you use. I'm defining \"use\" to include \"browse, read, get inspired by, or directly borrow snippets of code from\". You don't need to worry about formal citations, it's okay to make a list with links to your resources and provide a brief summary of how you used each one.\n-   For this exercise, you're asked to describe what your code does (instead of interpreting the visualization, since we already did that in class). If you write the code, it should be straightforward for you to describe it. If you borrow any code from outside resources, you need to understand what that code does, and describe it, ***in your own words***. (This is important, you're allowed to use found code, but you are not allowed to copy someone's blog post or tutorial as your description of their code.)\n-   Finally, you should personalize the visualization with your own touch. You can do this in a myriad of ways, e.g., change colors, annotations, labels, etc. This change should be made to make the plot more like the original in some way. You need to explicitly call out what change you made and why you made it.\n\n::: render-commit-push\n<br> Render, commit, and push one last time.\n\nMake sure that you commit and push all changed documents and your Git pane is completely empty before proceding. <br>\n:::\n\n# Wrap up\n\n## Submission\n\n-   Go to <http://www.gradescope.com> and click *Log in* in the top right corner.\n-   Click *School Credentials* $\\rightarrow$ *Cornell University NetID* and log in using your NetID credentials.\n-   Click on your *INFO 3312* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark all the pages associated with exercise. All the pages of your lab should be associated with at least one question (i.e., should be \"checked\").\n-   Select the first page of your .pdf submission to be associated with the *\"Workflow & formatting\"* question.\n\n## Grading\n\n-   Exercise 1: 10 points\n-   Exercise 2: 10 points\n-   Exercise 3: 10 points\n-   Exercise 4: 10 points\n-   Exercise 5: 10 points\n-   Total: 50 points\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}