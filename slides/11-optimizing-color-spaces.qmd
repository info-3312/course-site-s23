---
title: "Optimizing color spaces"
subtitle: "Lecture 11"
date: "March 2, 2023"
format: revealjs
execute:
  echo: false
---

```{r}
#| label: setup
#| include: false
#| cache: false

source(here::here("slides", "_R", "slide-opts.R"))
library(patchwork)
```

# Announcements

## Announcements

TODO

# Setup

## Packages + figures

```{r}
#| cache: false
# load packages
library(tidyverse)
library(readxl)
library(here)
library(patchwork)
library(knitr)
library(palmerpenguins)
library(colorblindr)
library(tidycensus)
library(scales)
library(RColorBrewer)
library(ggrepel)
library(cowplot)

# set default theme for ggplot2
theme_set(theme_minimal(base_size = 12))
```

## YAML options

```yaml
knitr:
  opts_chunk:
    fig.width: 7
    fig.asp: 0.618
    fig.retina: 2
    dpi: 150
    out.width: "80%"
    fig.showtext: true
```

# Uses of color in data visualization

---

<table style = "border: none; line-height: 2.5;">
<tr style = "background: white;">
<td style = "text-align: left; width: 50%;">
1. Distinguish categories (qualitative)
</td>
<td>
<img src = "images/11/qualitative.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>
</table>

## Qualitative scale example

::: panel-tabset

### Okabe-Ito

```{r}
#| label: popgrowth-vs-popsize-colored
#| out.width: 60%
US_census <- read_csv("data/US_census.csv")
US_regions <- read_csv("data/US_regions.csv")

popgrowth <- left_join(US_census, US_regions) %>%
    group_by(region, division, state) %>%
    summarize(
      pop2000 = sum(pop2000, na.rm = TRUE),
      pop2010 = sum(pop2010, na.rm = TRUE),
      popgrowth = (pop2010-pop2000)/pop2000
    ) %>%
    arrange(popgrowth) %>%
    ungroup() %>%
    mutate(
      #state = factor(state, levels = state),
      region = factor(region, levels = c("West", "South", "Midwest", "Northeast"))
    )

region_colors <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442")

labeled_states <- c(
  "Alaska", "Arizona", "California", "Florida", "Wisconsin", 
  "Louisiana", "Nevada", "Michigan", "Montana", "New Mexico",
  "Pennsylvania", "New York", "Oregon", "Rhode Island",
  "Tennessee", "Texas", "Utah", "Vermont"
)

df_repel <- select(popgrowth, x = pop2000, y = popgrowth, state) %>%
  mutate(label = ifelse(state %in% labeled_states, as.character(state), ""))

p_pop <- ggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region, fill = region)) +
  geom_text_repel(
    data = df_repel,
    aes(x, y, label = label),
    segment.alpha = 0.5, point.padding = 0.25,
    box.padding = .8,
    force = 1,
    min.segment.length = 0.1,
    max.overlaps = 1000,
    size = 10/.pt,
    seed = 7586,
    inherit.aes = FALSE
  ) +
  geom_point(size = 4, color = "white") +
  geom_point(size = 3, shape = 21) +
  scale_x_log10(
    breaks = c(1e6, 3e6, 1e7, 3e7),
    labels = expression(10^6, 3 %*% 10^6, 10^7, 3 %*% 10^7)
  ) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  xlab("population size in 2000") +
  ylab("population growth, 2000 to 2010") +
  theme_minimal_grid(14)

p_pop +  
  scale_fill_manual(values = region_colors) +
  scale_color_manual(values = darken(region_colors, .3))

```

### ColorBrewer Set1

```{r}
#| label: popgrowth-vs-popsize-colored2
#| out.width: 60%

region_colors <- RColorBrewer::brewer.pal(4, "Set1")

p_pop +  
  scale_fill_manual(values = region_colors) +
  scale_color_manual(values = darken(region_colors, .3))

```

### ColorBrewer Set3

```{r}
#| label: popgrowth-vs-popsize-colored3
#| out.width: 60%

region_colors <- RColorBrewer::brewer.pal(4, "Set3")

p_pop +  
  scale_fill_manual(values = region_colors) +
  scale_color_manual(values = darken(region_colors, .3))

```

:::

::: aside

Figure redrawn from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)
:::

## Uses of color in data visualization

<table style = "border: none; line-height: 2.5;">
<tr style = "background: white;">
<td style = "text-align: left; width: 50%;">
1. Distinguish categories (qualitative)
</td>
<td>
<img src = "images/11/qualitative.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>

<tr style = "background: white;">
<td style = "text-align: left;">
2. Represent numeric values (sequential)
</td>
<td>
<img src = "images/11/sequential.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>
</table>

## Sequential scale example

::: panel-tabset

### Viridis

```{r}
#| label: four-locations-temps-by-month
#| fig.width: 9.0
#| fig.asp: 0.3
temps_months <- read_csv("data/tempnormals.csv") %>%
  group_by(location, month_name) %>%
  summarize(mean = mean(temperature)) %>%
  mutate(
    month = factor(
      month_name,
      levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
    ),
    location = factor(
      location, levels = c("Death Valley", "Houston", "San Diego", "Chicago")
    )
  ) %>%
  select(-month_name)

p <- ggplot(temps_months, aes(x = month, y = location, fill = mean)) + 
  geom_tile(width = .95, height = 0.95) + 
  scale_y_discrete(name = NULL) +
  coord_fixed(expand = FALSE) +
  theme_half_open() +
  theme(
    axis.line = element_blank(),
    axis.ticks = element_blank(),
    legend.title = element_text(size = 12)
  )

p + scale_fill_viridis_c(
    option = "D",
    name = "temperature (°F)"
  )
```

### Inferno

```{r}
#| label: four-locations-temps-by-month2
#| fig.width: 9.0
#| fig.asp: 0.3
p + scale_fill_viridis_c(
    option = "B", begin = 0.15, end = 0.98,
    name = "temperature (°F)"
  )
```

### Cividis

```{r}
#| label: four-locations-temps-by-month3
#| fig.width: 9.0
#| fig.asp: 0.3
p + scale_fill_viridis_c(
    option = "E",
    name = "temperature (°F)"
  )
```

:::

::: aside
Figure redrawn from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)
:::

## Uses of color in data visualization

<table style = "border: none; line-height: 2.5;">
<tr style = "background: white;">
<td style = "text-align: left; width: 50%;">
1. Distinguish categories (qualitative)
</td>
<td>
<img src = "images/11/qualitative.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>

<tr style = "background: white;">
<td style = "text-align: left;">
2. Represent numeric values (sequential)
</td>
<td>
<img src = "images/11/sequential.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>

<tr style = "background: white;">
<td style = "text-align: left;">
3. Represent numeric values (diverging)
</td>
<td>
<img src = "images/11/diverging.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>
</table>

## Diverging scale example

::: panel-tabset

### ColorBrewer PiYG

```{r}
#| label: forensic-correlations1
#| fig.asp: 1.0
#| fig.width: 4.0
#| out.width: 35%
forensic_glass <- read_csv("data/forensic_glass.csv")

cm <- cor(select(forensic_glass, -type, -RI, -Si))
df_wide <- as.data.frame(cm)
df_long <- stack(df_wide)
names(df_long) <- c("cor", "var1")
df_long <- cbind(df_long, var2 = rep(rownames(cm), length(rownames(cm))))
clust <- hclust(as.dist(1-cm), method="average") 
levels <- clust$labels[clust$order]
df_long$var1 <- factor(df_long$var1, levels = levels)
df_long$var2 <- factor(df_long$var2, levels = levels)

p <- ggplot(filter(df_long, as.integer(var1) < as.integer(var2)),
       aes(var1, var2, fill=cor)) + 
  geom_tile(color = "white", size = 1) + 
  scale_x_discrete(position = "top", name = NULL, expand = c(0, 0)) +
  scale_y_discrete(name = NULL, expand = c(0, 0)) +
  guides(
    fill = guide_colorbar(
      direction = "horizontal",
      label.position = "bottom",
      title.position = "top",
      barwidth = grid::unit(140, "pt"),
      barheight = grid::unit(17.5, "pt"),
      ticks.linewidth = 1
    )
  ) +
  coord_fixed() +
  theme_half_open(rel_small = 1) +
  theme(
    axis.line = element_blank(),
    axis.ticks = element_blank(),
    axis.ticks.length = grid::unit(3, "pt"),
    legend.position = c(.97, .0),
    legend.justification = c(1, 0),
    legend.title.align = 0.5
  )
p + scale_fill_distiller(
  name = "correlation",
  limits = c(-.5, .5),
  breaks = c(-.5, 0, .5),
  labels = c("–0.5", "0.0", "0.5"),
  type = "div",
  palette = "PiYG",
  direction = 1
)
```

### Carto Earth

```{r}
#| label: forensic-correlations2
#| fig.asp: 1.0
#| fig.width: 4.0
#| out.width: 35%
p + scale_fill_continuous_divergingx(
  name = "correlation",
  limits = c(-.5, .5),
  breaks = c(-.5, 0, .5),
  labels = c("–0.5", "0.0", "0.5"),
  palette = "Earth",
  rev = FALSE
)
```

### Blue-Red

```{r}
#| label: forensic-correlations3
#| fig.asp: 1.0
#| fig.width: 4.0
#| out.width: 35%
p + scale_fill_continuous_diverging(
  name = "correlation",
  limits = c(-.5, .5),
  breaks = c(-.5, 0, .5),
  labels = c("–0.5", "0.0", "0.5"),
  palette = "Blue-Red",
  rev = TRUE
)
```

:::

::: aside
Figure redrawn from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)
:::

## Uses of color in data visualization

<table style = "border: none; line-height: 2.5;">
<tr style = "background: white;">
<td style = "text-align: left; width: 50%;">
1. Distinguish categories (qualitative)
</td>
<td>
<img src = "images/11/qualitative.png" width = 100% style = "text-align: right; vertical-align: middle;"></img>
</td>
</tr>

<tr style = "background: white;">
<td style = "text-align: left;">
2. Represent numeric values (sequential)
</td>
<td>
<img src = "images/11/sequential.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>

<tr style = "background: white;">
<td style = "text-align: left;">
3. Represent numeric values (diverging)
</td>
<td>
<img src = "images/11/diverging.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>

<tr style = "background: white;">
<td style = "text-align: left;">
4. Highlight
</td>
<td>
<img src = "images/11/highlight.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>
</table>

## Highlight example

::: panel-tabset

### Grays with accents

```{r}
#| label: Aus-athletes-track
#| out.width: 60%
male_Aus <- ggridges::Aus_athletes %>%
  filter(sex == "m") %>%
  filter(
    sport %in% c("basketball", "field", "swimming", "track (400m)", "track (sprint)", "water polo")
  ) %>%
  mutate(
    sport = 
      case_when(
        sport == "track (400m)" ~ "track",
        sport == "track (sprint)" ~ "track",
        TRUE ~ sport
      ),
    sport = factor(
      sport,
      levels = c("track", "field", "water polo", "basketball", "swimming")
    )
  )

p <- ggplot(male_Aus, aes(x=height, y=pcBfat, shape=sport, color = sport, fill = sport)) +
  geom_point(size = 3) +
  scale_shape_manual(values = 21:25) +
  xlab("height (cm)") +
  ylab("% body fat") +
  theme_minimal_grid(14)

colors <- c("#BD3828", rep("#808080", 4))
fills <- c(
  alpha(colors[1], .815),
  alpha(colors[2:5], .5)
)

p + 
  scale_color_manual(values = colors) +
  scale_fill_manual(values = fills)
```

### Okabe-Ito accent

```{r}
#| label: Aus-athletes-track2
#| out.width: 60%

accent_OkabeIto <- c("#E69F00", "#56B4E9", "#CC79A7", "#F0E442", "#0072B2", "#009E73", "#D55E00")
accent_OkabeIto[1:4] <- desaturate(lighten(accent_OkabeIto[1:4], .4), .8)
accent_OkabeIto[5:7] <- darken(accent_OkabeIto[5:7], .3)

colors <- c(accent_OkabeIto[5], darken(accent_OkabeIto[1:4], .2))
fills <- c(
  alpha(accent_OkabeIto[5], .7),
  alpha(accent_OkabeIto[1:4], .7)
)

p + 
  scale_color_manual(values = colors) +
  scale_fill_manual(values = fills)
```

### ColorBrewer accent

```{r}
#| label: Aus-athletes-track3
#| out.width: 60%

accent_Brewer <- RColorBrewer::brewer.pal(7, name = "Accent")[c(7, 1:4)]

colors <- darken(accent_Brewer, .2)
fills <- c(accent_Brewer[1], alpha(accent_Brewer[2:5], .7))

p + 
  scale_color_manual(values = colors) +
  scale_fill_manual(values = fills)
```

:::

::: aside
Figure redrawn from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)
:::

## Uses of color in data visualization

<table style = "border: none; line-height: 2.5;">
<tr style = "background: white;">
<td style = "text-align: left; width: 50%;">
1. Distinguish categories (qualitative)
</td>
<td>
<img src = "images/11/qualitative.png" width = 100% style = "text-align: right; vertical-align: middle;"></img>
</td>
</tr>

<tr style = "background: white;">
<td style = "text-align: left;">
2. Represent numeric values (sequential)
</td>
<td>
<img src = "images/11/sequential.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>

<tr style = "background: white;">
<td style = "text-align: left;">
3. Represent numeric values (diverging)
</td>
<td>
<img src = "images/11/diverging.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>

<tr style = "background: white;">
<td style = "text-align: left;">
4. Highlight
</td>
<td>
<img src = "images/11/highlight.png" width = 100% style = "text-align: right; vertical-align: middle"></img>
</td>
</tr>
</table>

# Choosing a color scale

## Choosing a color scale

- Emphasis on interpretability and accessibility
- Default palettes are less than desirable
- Variables may require transformations

## Default palette in `ggplot2`

```{r}
# generate simulated data points
plots <- purrr::map(1:16, ~ gg_color_swatches(n = .x) +
  ggtitle(paste(.x, "color")))

wrap_plots(plots)
```

## Suboptimal default choices

```{r}
# default color palette
p_pop
```

## Common forms of color vision deficiency

### Red-green

- Deuteranomaly
- Protanomaly
- Protanopia and deuteranopia

### Blue-yellow

- Tritanomaly
- Tritanopia

### Complete color vision deficiency

- Monochromacy

## Inspecting for color vision deficiency

```{r}
# create basic penguins plot
pen_fig <- ggplot(data = penguins, mapping = aes(x = body_mass_g, fill = species)) +
  geom_density(alpha = 0.6) +
  labs(
    x = "Body mass (in grams)",
    fill = "Species"
  ) +
  theme(legend.position = "bottom")
pen_fig
```

## Inspecting for color vision deficiency

```{r}
#| echo: true
#| eval: false
library(colorblindr)
cvd_grid(plot = pen_fig)
```

```{r}
#| out.width: 70%
{
  pen_fig +
    theme_minimal(base_size = 11)
} %>%
  cvd_grid()
```

## Inspecting for color deficiency

```{r}
gg_color_swatches(n = 8) +
  {
    gg_color_swatches(n = 8) %>%
      cvd_grid()
  } +
  plot_layout(widths = c(30, 70)) +
  plot_annotation(title = "Default color palette for 8")
```

## Inspecting for color deficiency

```{r}
gg_color_gradient(n = 200) +
  {
    gg_color_gradient(n = 200) %>%
      cvd_grid()
  } +
  plot_layout(widths = c(30, 70)) +
  plot_annotation(title = "Default continuous gradient")
```

## When to use quantitative or qualitative color scales?

```{r}
include_graphics(path = "images/11/quant-qual.png")
```

::: aside
Source: [Lisa Charlotte Muth](https://blog.datawrapper.de/category/color-in-data-vis/)
:::

## Use qualitative for nominal variables

```{r}
include_graphics(path = "images/11/unordered.png")
```

::: aside
Source: [Lisa Charlotte Muth](https://blog.datawrapper.de/category/color-in-data-vis/)
:::

## Use qualitative for nominal variables

```{r}
include_graphics(path = "images/11/unemp-best.png")
```

::: aside
Source: [Lisa Charlotte Muth](https://blog.datawrapper.de/category/color-in-data-vis/)
:::

## Quantitative $\neq$ continuous

```{r}
include_graphics(path = "images/11/likert.png")
```

::: aside
Source: [Lisa Charlotte Muth](https://blog.datawrapper.de/category/color-in-data-vis/)
:::

## Shades to emphasize order

```{r}
include_graphics(path = "images/11/treemap.png")
```

::: aside
Source: [Lisa Charlotte Muth](https://blog.datawrapper.de/category/color-in-data-vis/)
:::

## Shades to distinguish subcategories

```{r}
include_graphics(path = "images/11/subcategories.png")
```

::: aside
Source: [Lisa Charlotte Muth](https://blog.datawrapper.de/category/color-in-data-vis/)
:::

# Implementing optimal color palettes in R

## **ggplot2** color scale functions

::: {.small .centered}

Scale function            | Aesthetic &nbsp;&nbsp;&nbsp;   | Data type     | Palette type
:-----------              | :----------  | :------------ | :------------
`scale_color_hue()` &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | `color` | discrete  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | qualitative &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

:::

## **ggplot2** color scale functions are a bit of a mess

::: {.small .centered}

Scale function            | Aesthetic &nbsp;&nbsp;&nbsp;   | Data type     | Palette type
:-----------              | :----------  | :------------ | :------------
`scale_color_hue()` &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | `color` | discrete  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | qualitative &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
`scale_fill_hue()`        | `fill `      | discrete      | qualitative

:::

## **ggplot2** color scale functions are a bit of a mess

::: {.small .centered}

Scale function            | Aesthetic &nbsp;&nbsp;&nbsp;   | Data type     | Palette type
:-----------              | :----------  | :------------ | :------------
`scale_color_hue()` &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | `color` | discrete  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | qualitative &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
`scale_fill_hue()`        | `fill `      | discrete      | qualitative
`scale_color_gradient()`  | `color`      | continuous    | sequential

:::

## **ggplot2** color scale functions are a bit of a mess

::: {.small .centered}

Scale function            | Aesthetic &nbsp;&nbsp;&nbsp;   | Data type     | Palette type
:-----------              | :----------  | :------------ | :------------
`scale_color_hue()` &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | `color` | discrete  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | qualitative &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
`scale_fill_hue()`        | `fill `      | discrete      | qualitative
`scale_color_gradient()`  | `color`      | continuous    | sequential
`scale_color_gradient2()` | `color`      | continuous    | diverging

:::

## **ggplot2** color scale functions are a bit of a mess

::: {.small .centered}

Scale function            | Aesthetic &nbsp;&nbsp;&nbsp;   | Data type     | Palette type
:-----------              | :----------  | :------------ | :------------
`scale_color_hue()` &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | `color` | discrete  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | qualitative &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
`scale_fill_hue()`        | `fill `      | discrete      | qualitative
`scale_color_gradient()`  | `color`      | continuous    | sequential
`scale_color_gradient2()` | `color`      | continuous    | diverging
`scale_fill_viridis_c()`   | `color`      | continuous    | sequential
`scale_fill_viridis_d()`   | `fill`       | discrete      | sequential
`scale_color_brewer()`    | `color`      | discrete      | qualitative, diverging, sequential
`scale_fill_brewer()`     | `fill`       | discrete      | qualitative, diverging, sequential
`scale_color_distiller()` | `color`      | continuous    | qualitative, diverging, sequential

:::

... and there are many many more

## Examples

::: panel-tabset

### Output

```{r}
#| label: temps-tiles1-out
#| ref.label: temps-tiles1
#| echo: false
#| fig.asp: 0.3
```

### Code

```{r}
#| label: temps-tiles1
#| eval: false
#| echo: true
ggplot(temps_months, aes(x = month, y = location, fill = mean)) + 
  geom_tile(width = 0.95, height = 0.95) + 
  coord_fixed(expand = FALSE) +
  theme_classic()
  # no fill scale defined, default is scale_fill_gradient()
```

:::

## Examples

::: panel-tabset

### Output

```{r}
#| label: temps-tiles2-out
#| ref.label: temps-tiles2
#| echo: false
#| fig.asp: 0.3
```

### Code

```{r}
#| label: temps-tiles2
#| eval: false
#| echo: true
#| code-line-numbers: "5"
ggplot(temps_months, aes(x = month, y = location, fill = mean)) + 
  geom_tile(width = 0.95, height = 0.95) + 
  coord_fixed(expand = FALSE) +
  theme_classic() +
  scale_fill_gradient()
```

:::

## Examples

::: panel-tabset

### Output

```{r}
#| label: temps-tiles3-out
#| ref.label: temps-tiles3
#| echo: false
#| fig.asp: 0.3
```

### Code

```{r}
#| label: temps-tiles3
#| eval: false
#| echo: true
#| code-line-numbers: "5"
ggplot(temps_months, aes(x = month, y = location, fill = mean)) + 
  geom_tile(width = 0.95, height = 0.95) + 
  coord_fixed(expand = FALSE) +
  theme_classic() +
  scale_fill_viridis_c()
```

:::

## Examples

::: panel-tabset

### Output

```{r}
#| label: temps-tiles4-out
#| ref.label: temps-tiles4
#| echo: false
#| fig.asp: 0.3
```

### Code

```{r}
#| label: temps-tiles4
#| eval: false
#| echo: true
#| code-line-numbers: "5"
ggplot(temps_months, aes(x = month, y = location, fill = mean)) + 
  geom_tile(width = 0.95, height = 0.95) + 
  coord_fixed(expand = FALSE) +
  theme_classic() +
  scale_fill_viridis_c(option = "B", begin = 0.15)
```

:::

## Examples

::: panel-tabset

### Output

```{r}
#| label: temps-tiles5-out
#| ref.label: temps-tiles5
#| echo: false
#| fig.asp: 0.3
```

### Code

```{r}
#| label: temps-tiles5
#| eval: false
#| echo: true
#| code-line-numbers: "5"
ggplot(temps_months, aes(x = month, y = location, fill = mean)) + 
  geom_tile(width = 0.95, height = 0.95) + 
  coord_fixed(expand = FALSE) +
  theme_classic() +
  scale_fill_distiller(palette = "YlGnBu")
```

:::

## The `colorspace` package creates some order

Scale name: `scale_<aesthetic>_<datatype>_<colorscale>()`

. . .

- `<aesthetic>`: name of the aesthetic (`fill`, `color`, `colour`)
- `<datatype>`: type of variable plotted (`discrete`, `continuous`, `binned`)
- `<colorscale>`: type of the color scale (`qualitative`, `sequential`, `diverging`, `divergingx`)

. . .

Scale function                       | Aesthetic &nbsp;&nbsp;&nbsp; | Data type  | Palette type &nbsp;&nbsp;&nbsp;
:-----------                         | :--------  | :--------- | :------------
`scale_color_discrete_qualitative()` | `color`    | discrete   | qualitative
`scale_fill_continuous_sequential()` | `fill`     | continuous | sequential
`scale_colour_continuous_divergingx()` | `colour`   | continuous | diverging

## Examples

::: panel-tabset

### Output

```{r}
#| label: temps-tiles6-out
#| ref.label: temps-tiles6
#| echo: false
#| fig.asp: 0.3
```

### Code

```{r}
#| label: temps-tiles6
#| eval: false
#| echo: true
#| code-line-numbers: "5"
ggplot(temps_months, aes(x = month, y = location, fill = mean)) + 
  geom_tile(width = 0.95, height = 0.95) + 
  coord_fixed(expand = FALSE) +
  theme_classic() +
  scale_fill_continuous_sequential(palette = "YlGnBu")
```

:::

## Examples

::: panel-tabset

### Output

```{r}
#| label: temps-tiles7-out
#| ref.label: temps-tiles7
#| echo: false
#| fig.asp: 0.3
```

### Code

```{r}
#| label: temps-tiles7
#| eval: false
#| echo: true
#| code-line-numbers: "5"
ggplot(temps_months, aes(x = month, y = location, fill = mean)) + 
  geom_tile(width = 0.95, height = 0.95) + 
  coord_fixed(expand = FALSE) +
  theme_classic() +
  scale_fill_continuous_sequential(palette = "Viridis")
```

:::

## Examples

::: panel-tabset

### Output

```{r}
#| label: temps-tiles8-out
#| ref.label: temps-tiles8
#| echo: false
#| fig.asp: 0.3
```

### Code

```{r}
#| label: temps-tiles8
#| eval: false
#| echo: true
#| code-line-numbers: "5"
ggplot(temps_months, aes(x = month, y = location, fill = mean)) + 
  geom_tile(width = 0.95, height = 0.95) + 
  coord_fixed(expand = FALSE) +
  theme_classic() +
  scale_fill_continuous_sequential(palette = "Inferno", begin = 0.15)
```

:::

---

```{r}
#| label: colorspace-palettes-seq
colorspace::hcl_palettes(type = "sequential", plot = TRUE) # all sequential palettes
```

---

```{r}
#| label: colorspace-palettes-div
colorspace::hcl_palettes(type = "diverging", plot = TRUE, n = 9) # all diverging palettes
```

---

```{r}
#| label: colorspace-palettes-divx
colorspace::divergingx_palettes(plot = TRUE, n = 9) # all divergingx palettes
```

# Setting colors for discrete, qualitative scales

---

```{r}
#| label: colorspace-palettes-qual
colorspace::hcl_palettes(type = "qualitative", plot = TRUE) # all qualitative palettes
```

## Examples

::: panel-tabset

### Output

```{r}
#| label: qual-scales-example1-out
#| ref.label: qual-scales-example1
#| echo: false
#| out.width: 70%
```

### Code

```{r}
#| label: qual-scales-example1
#| eval: false
#| echo: true
ggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +
  geom_point(size = 4) +
  scale_x_log10()
  # no color scale defined, default is scale_color_hue()
```

:::

## Examples

::: panel-tabset

### Output

```{r}
#| label: qual-scales-example2-out
#| ref.label: qual-scales-example2
#| echo: false
#| out.width: 70%
```

### Code

```{r}
#| label: qual-scales-example2
#| eval: false
#| echo: true
#| code-line-numbers: "4"
ggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +
  geom_point(size = 4) +
  scale_x_log10() +
  scale_color_hue()
```

:::

## Examples

::: panel-tabset

### Output

```{r}
#| label: qual-scales-example3a-out
#| ref.label: qual-scales-example3a
#| echo: false
#| out.width: 70%
```

### Code

```{r}
#| label: qual-scales-example3a
#| eval: false
#| echo: true
#| code-line-numbers: "4"
ggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +
  geom_point(size = 4) +
  scale_x_log10() +
  scale_color_discrete_qualitative(palette = "Dark 2")
```

:::

## Examples

::: panel-tabset

### Output

```{r}
#| label: qual-scales-example3-out
#| ref.label: qual-scales-example3
#| echo: false
#| out.width: 70%
```

### Code

```{r}
#| label: qual-scales-example3
#| eval: false
#| echo: true
#| code-line-numbers: "1,6"
library(ggthemes)  # for scale_color_colorblind()

ggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +
  geom_point(size = 4) +
  scale_x_log10() +
  scale_color_colorblind()
```

:::

## Examples

::: panel-tabset

### Output

```{r}
#| label: qual-scales-example4-out
#| ref.label: qual-scales-example4
#| echo: false
#| out.width: 70%
```

### Code

```{r}
#| label: qual-scales-example4
#| eval: false
#| echo: true
#| code-line-numbers: "4-9"
ggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +
  geom_point(size = 4) +
  scale_x_log10() +
  scale_color_manual(
    values = c(
      West = "#E69F00", South = "#56B4E9",
      Midwest = "#009E73", Northeast = "#F0E442"
    )
  )
```

:::

## Okabe-Ito RGB codes

![](https://clauswilke.com/dataviz/pitfalls_of_color_use_files/figure-html/palette-Okabe-Ito-1.png){fig-align=center width=100%}

Name           | Hex code &nbsp;&nbsp; | R, G, B (0-255)
:----------    | :-------  | :--------
orange         | #E69F00   | 230, 159, 0
sky blue	     | #56B4E9   | 86, 180, 233
bluish green   | #009E73   | 0, 158, 115
yellow	       | #F0E442   | 240, 228, 66
blue	         | #0072B2   | 0, 114, 178
vermilion	     | #D55E00   | 213, 94, 0
reddish purple | #CC79A7   | 204, 121, 167
black	         | #000000   | 0, 0, 0

## `ae-colorspace`

::: appex
- Go to the course [GitHub org](https://github.coecis.cornell.edu/info2950-s23/) and find your `ae-colorspace` (repo name will be suffixed with your GitHub name).
- Clone the repo in RStudio Workbench, open the Quarto document in the repo, and follow along and complete the exercises.
:::
