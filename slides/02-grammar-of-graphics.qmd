---
title: "The grammar of graphics"
subtitle: "Lecture 2"
date: "January 26, 2023"
format: revealjs
---

```{r}
#| label: setup
#| include: false

ggplot2::theme_set(ggplot2::theme_gray(base_size = 16))
library(knitr)
```

# Data visualization

## Data visualization

> *"The simple graph has brought more information to the data analyst's mind than any other device."*
> 
> John Tukey

- Data visualization is the creation and study of the visual representation of data
- Many tools for visualizing data -- R is one of them
- Many approaches/systems within R for making data visualizations -- **ggplot2** is one of them, and that's what we're going to use

## ggplot2 $\in$ tidyverse

:::: columns

::: {.column width="50%"}

```{r}
#| echo: false
include_graphics("images/02/ggplot2-part-of-tidyverse.png")
```

:::

::: {.column width="50%"}

- **ggplot2** is tidyverse's data visualization package 
- `gg` in "ggplot2" stands for Grammar of Graphics 
- Inspired by the book **Grammar of Graphics** by Leland Wilkinson

:::
::::

## Grammar of Graphics

:::: columns

::: {.column width="33%"}

A grammar of graphics is a tool that enables us to concisely describe the components of a graphic

:::

::: {.column width="67%"}

```{r}
#| echo: false
#| out.width: 90%
include_graphics("images/02/grammar-of-graphics.png")
```

:::
::::

::: aside
Source: [BloggoType](http://bloggotype.blogspot.com/2016/08/holiday-notes2-grammar-of-graphics.html)
:::

## Hello ggplot2!

- `ggplot()` is the main function in ggplot2
- Plots are constructed in layers
- Structure of the code for plots can be summarized as

```r
ggplot(data = [dataset], 
       mapping = aes(x = [x-variable], y = [y-variable])) +
   geom_xxx() +
   other options
```

- The ggplot2 package comes with the tidyverse

```{r}
library(tidyverse)
```

- For help with ggplot2, see [ggplot2.tidyverse.org](http://ggplot2.tidyverse.org/)

# Why do we visualize?

## Why do we visualize? 

1. Discover patterns that may not be obvious from numerical summaries

## Anscombe's quartet

```{r}
#| label: quartet-for-show
library(Tmisc)
quartet |> slice_head(n = 15)
```

## Summary statistics for Anscombe's quartet

```{r}
#| label: quartet-summary
quartet |>
  group_by(set) |>
  summarise(
    mean_x = mean(x), 
    mean_y = mean(y),
    sd_x = sd(x),
    sd_y = sd(y),
    r = cor(x, y)
  )
```

## Scatterplots for Anscombe's quartet

```{r}
#| label: quartet-plot
#| echo: false
#| out-width: 100%
#| fig-asp: 0.4
ggplot(quartet, aes(x = x, y = y)) +
  geom_point() +
  facet_wrap(~ set, ncol = 4)
```

## Why do we visualize? 

1. Discover patterns that may not be obvious from numerical summaries

2. Convey information in a way that is otherwise difficult/impossible to convey

## [Impact of Omicron variant on unvaccinated populations]{.small}

```{r}
#| echo: false
#| fig.align: center
#| out.width: 70%
include_graphics("images/02/covid-hong-kong.jpeg")
```

::: aside
Source: [John Burn-Murdoch](https://twitter.com/jburnmurdoch/status/1503420660869214213)
:::

## [COVID-19 vaccination in US Counties]{.small}

```{r}
#| echo: false
#| out-width: 70%
include_graphics("images/02/nytimes-us-covid-vaccine.png")
```

::: aside
Source: [New York Times](https://www.nytimes.com/interactive/2020/us/covid-19-vaccine-doses.html), March 28, 2022.
:::

# ggplot2 `r emo::ji("heart")` `r emo::ji("penguin")`

## ggplot2 $\in$ tidyverse

:::: columns

::: {.column width="50%"}

```{r}
#| echo: false
include_graphics("images/02/ggplot2-part-of-tidyverse.png")
```

:::

::: {.column width="50%"}

- **ggplot2** is tidyverse's data visualization package 
- Structure of the code for plots can be summarized as

```r
ggplot(data = [dataset], 
       mapping = aes(x = [x-variable], 
                     y = [y-variable])) +
   geom_xxx() +
   other options
```

:::
::::

## Data: Palmer Penguins

Measurements for penguin species, island in Palmer Archipelago, size (flipper length, body mass, bill dimensions), and sex.

:::: columns

::: {.column width="33%"}

```{r}
#| echo: false
include_graphics("images/02/penguins.png")
```

:::

::: {.column width="67%"}

```{r}
library(palmerpenguins)
glimpse(penguins)
```

:::
::::

---

::: {.panel-tabset}

### Plot

```{r}
#| ref.label: penguins
#| echo: false
#| warning: false
#| out-width: 70%
#| fig-width: 8.0
```

### Code

```{r}
#| label: penguins
#| fig-show: hide
ggplot(data = penguins, 
       mapping = aes(x = bill_depth_mm, y = bill_length_mm,
                     color = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)",
       color = "Species")
```

:::

# Coding out loud

---

::: {.small}
> **Start with the `penguins` data frame**

```{r}
#| label: penguins-0
#| output-location: column
#| code-line-numbers: "1"
#| out-width: "100%"
#| fig-width: 6
ggplot(data = penguins)
```

:::

---

::: {.small}
> Start with the `penguins` data frame,
> **map bill depth to the x-axis**

```{r}
#| label: penguins-1
#| output-location: column
#| code-line-numbers: "2"
#| out-width: "100%"
#| fig-width: 6
ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm))
```

:::

---

::: {.small}
> Start with the `penguins` data frame,
> map bill depth to the x-axis
> **and map bill length to the y-axis.**

```{r}
#| label: penguins-2
#| output-location: column
#| code-line-numbers: "3"
#| out-width: "100%"
#| fig-width: 6
ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm))
```

:::

---

::: {.small}
> Start with the `penguins` data frame,
> map bill depth to the x-axis
> and map bill length to the y-axis. 
> **Represent each observation with a point**

```{r}
#| label: penguins-3
#| output-location: column
#| code-line-numbers: "4"
#| out-width: "100%"
#| fig-width: 6
ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm)) + 
  geom_point()
```

:::

---

::: {.small}
> Start with the `penguins` data frame,
> map bill depth to the x-axis
> and map bill length to the y-axis. 
> Represent each observation with a point
> **and map species to the color of each point.**

```{r}
#| label: penguins-4
#| output-location: column
#| code-line-numbers: "4"
#| out-width: "100%"
#| fig-width: 6
ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     color = species)) +
  geom_point()
```

:::

---

::: {.small}
> Start with the `penguins` data frame,
> map bill depth to the x-axis
> and map bill length to the y-axis. 
> Represent each observation with a point
> and map species to the color of each point.
> **Title the plot "Bill depth and length"**

```{r}
#| label: penguins-5
#| output-location: column
#| code-line-numbers: "6"
#| out-width: "100%"
#| fig-width: 6
ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     color = species)) +
  geom_point() +
  labs(title = "Bill depth and length")
```

:::

---

::: {.small}
> Start with the `penguins` data frame,
> map bill depth to the x-axis
> and map bill length to the y-axis. 
> Represent each observation with a point
> and map species to the color of each point.
> Title the plot "Bill depth and length", 
> **add the subtitle "Dimensions for Adelie, Chinstrap, and Gentoo Penguins"**

```{r}
#| label: penguins-6
#| output-location: column
#| code-line-numbers: "7"
#| out-width: "100%"
#| fig-width: 6
ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     color = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins")
```

:::

---

::: {.small}
> Start with the `penguins` data frame,
> map bill depth to the x-axis
> and map bill length to the y-axis. 
> Represent each observation with a point
> and map species to the color of each point.
> Title the plot "Bill depth and length", 
> add the subtitle "Dimensions for Adelie, Chinstrap, and Gentoo Penguins", 
> **label the x and y axes as "Bill depth (mm)" and "Bill length (mm)", respectively**

```{r}
#| label: penguins-7
#| output-location: column
#| code-line-numbers: "8"
#| out-width: "100%"
#| fig-width: 6
ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     color = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)")
```

:::

---

::: {.small}
> Start with the `penguins` data frame,
> map bill depth to the x-axis
> and map bill length to the y-axis. 
> Represent each observation with a point
> and map species to the color of each point.
> Title the plot "Bill depth and length", 
> add the subtitle "Dimensions for Adelie, Chinstrap, and Gentoo Penguins", 
> label the x and y axes as "Bill depth (mm)" and "Bill length (mm)", respectively,
> **label the legend "Species"**

```{r}
#| label: penguins-8
#| output-location: column
#| code-line-numbers: "9"
#| out-width: "100%"
#| fig-width: 6
ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     color = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)",
       color = "Species")
```

:::

---

::: {.small}
> Start with the `penguins` data frame,
> map bill depth to the x-axis
> and map bill length to the y-axis. 
> Represent each observation with a point
> and map species to the color of each point.
> Title the plot "Bill depth and length", 
> add the subtitle "Dimensions for Adelie, Chinstrap, and Gentoo Penguins", 
> label the x and y axes as "Bill depth (mm)" and "Bill length (mm)", respectively,
> label the legend "Species", 
> **and add a caption for the data source.**

```{r}
#| label: penguins-9
#| output-location: column
#| code-line-numbers: "10"
#| out-width: "100%"
#| fig-width: 6
ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     color = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)",
       color = "Species",
       caption = "Source: Palmer Station LTER / palmerpenguins package")
```

:::

---

::: {.small}
> Start with the `penguins` data frame,
> map bill depth to the x-axis
> and map bill length to the y-axis. 
> Represent each observation with a point
> and map species to the color of each point.
> Title the plot "Bill depth and length", 
> add the subtitle "Dimensions for Adelie, Chinstrap, and Gentoo Penguins", 
> label the x and y axes as "Bill depth (mm)" and "Bill length (mm)", respectively,
> label the legend "Species", 
> and add a caption for the data source.
> **Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness.**

```{r}
#| label: penguins-10
#| output-location: column
#| code-line-numbers: "11"
#| out-width: "100%"
#| fig-width: 6
ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     color = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)",
       color = "Species",
       caption = "Source: Palmer Station LTER / palmerpenguins package") +
  scale_color_viridis_d()
```

:::

---

::: {.panel-tabset}

### Plot

```{r}
#| ref.label: penguins-10-nohighlight
#| echo: false
#| warning: false
```

### Code

```{r}
#| label: penguins-10-nohighlight
#| fig-show: hide
ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     color = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)",
       color = "Species",
       caption = "Source: Palmer Station LTER / palmerpenguins package") +
  scale_color_viridis_d()
```

### Narrative

Start with the `penguins` data frame,
map bill depth to the x-axis
and map bill length to the y-axis. 

Represent each observation with a point
and map species to the color of each point.

Title the plot "Bill depth and length", 
add the subtitle "Dimensions for Adelie, Chinstrap, and Gentoo Penguins", 
label the x and y axes as "Bill depth (mm)" and "Bill length (mm)", respectively,
label the legend "Species", 
and add a caption for the data source.

Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness.

:::

---

## Argument names

::: appex
You can omit the names of first two arguments when building plots with `ggplot()`.
:::

:::: columns

::: {.column .small width="50%"}

```{r}
#| label: named-args
#| eval: false
ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     color = species)) +
  geom_point() +
  scale_color_viridis_d()
```

:::

::: {.column .small width="50%"}

```{r}
#| label: not-named-args
#| eval: false
ggplot(penguins,
       aes(x = bill_depth_mm,
           y = bill_length_mm,
           color = species)) +
  geom_point() +
  scale_color_viridis_d()
```

:::

::::

# Aesthetics


## Aesthetics options

Commonly used characteristics of plotting characters that can be **mapped to a specific variable** in the data are

- `color`
- `shape`
- `size`
- `alpha` (transparency)

## Color

```{r}
#| label: color
#| out-width: 100%
#| output-location: column
#| fig-width: 6
#| code-line-numbers: "4"
ggplot(penguins,
       aes(x = bill_depth_mm, 
           y = bill_length_mm,
           color = species)) +
  geom_point() +
  scale_color_viridis_d()
```

## Shape

Mapped to a different variable than `color`

```{r}
#| label: shape-island
#| out-width: 100%
#| output-location: column
#| fig-width: 6
#| code-line-numbers: "5"
ggplot(penguins,
       aes(x = bill_depth_mm, 
           y = bill_length_mm,
           color = species,
           shape = island)) +
  geom_point() +
  scale_color_viridis_d()
```

## Shape

Mapped to same variable as `color`

```{r}
#| label: shape-species
#| out-width: 100%
#| output-location: column
#| fig-width: 6
#| code-line-numbers: "5"
ggplot(penguins,
       aes(x = bill_depth_mm, 
           y = bill_length_mm,
           color = species,
           shape = species)) +
  geom_point() +
  scale_color_viridis_d()
```

## Size

```{r}
#| label: size
#| out-width: 100%
#| output-location: column
#| fig-width: 6
#| code-line-numbers: "6"
ggplot(penguins,
       aes(x = bill_depth_mm, 
           y = bill_length_mm,
           color = species,
           shape = species,
           size = body_mass_g)) +
  geom_point() +
  scale_color_viridis_d()
```

## Alpha

```{r}
#| label: alpha
#| out-width: 100%
#| output-location: column
#| fig-width: 6
#| code-line-numbers: "7"
ggplot(penguins,
       aes(x = bill_depth_mm, 
           y = bill_length_mm,
           color = species,
           shape = species,
           size = body_mass_g,
           alpha = flipper_length_mm)) +
  geom_point() +
  scale_color_viridis_d()
```

---

:::: columns

::: {.column width="50%"}

### Mapping

```{r}
#| out-width: 100%
#| code-line-numbers: "4,5"
ggplot(penguins,
       aes(x = bill_depth_mm,
           y = bill_length_mm,
           size = body_mass_g,
           alpha = flipper_length_mm)) +
  geom_point()
```

:::

::: {.column width="50%"}

### Setting

```{r}
#| out-width: 100%
#| code-line-numbers: "4"
ggplot(penguins,
       aes(x = bill_depth_mm,
           y = bill_length_mm)) + 
  geom_point(size = 2, alpha = 0.5)
```

:::

::::

## Mapping vs. setting

- **Mapping:** Determine the size, alpha, etc. of points based on the values of a variable in the data
  - goes into `aes()`

- **Setting:** Determine the size, alpha, etc. of points **not** based on the values of a variable in the data
  - goes into `geom_*()` (this was `geom_point()` in the previous example, but we'll learn about other geoms soon!)
  
# Faceting

## Faceting

- Smaller plots that display different subsets of the data
- Useful for exploring conditional relationships and large data

---

::: {.panel-tabset}

### Plot

```{r}
#| ref.label: facet
#| echo: false
#| out-width: 70%
```

### Code

```{r}
#| label: facet
#| fig-show: hide
#| code-line-numbers: "3"
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  facet_grid(rows = vars(species), cols = vars(island))
```

:::

## Various ways to facet

::: appex
In the next few slides describe what each plot displays. Think about how the code relates to the output.

**Note:** The plots in the next few slides do not have proper titles, axis labels, etc. because we want you to figure out what's happening in the plots. But you should always label your plots!
:::

---

```{r}
#| code-line-numbers:  "3"
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  facet_grid(rows = vars(species), cols = vars(sex))
```

---

```{r}
#| code-line-numbers:  "3"
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  facet_grid(rows = vars(sex), cols = vars(species))
```

---

```{r}
#| fig-asp: 0.5
#| code-line-numbers:  "3"
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  facet_wrap(facets = vars(species))
```

---

```{r}
#| fig.asp: 0.5
#| code-line-numbers:  "3"
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  facet_grid(rows = NULL, cols = vars(species))
```

---

```{r}
#| code-line-numbers:  "3"
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  facet_wrap(facets = vars(species), ncol = 2)
```

## Faceting summary

- `facet_grid()`:
    - 2 dimensional grid
    - `rows = vars(<VARIABLE>), cols = vars(<VARIABLE>)`
    - Alternative: `rows ~ cols`
- `facet_wrap()`: 1 dimensional ribbon wrapped according to number of rows and columns specified or available plotting area

## Facet and color

::: {.panel-tabset}

### Plot

```{r}
#| ref.label: facet-color-legend
#| echo: false
#| out-width: 70%
```

### Code

```{r}
#| label: facet-color-legend
#| fig-show: hide
#| code-line-numbers: "5,8"
ggplot(
  penguins, 
  aes(x = bill_depth_mm, 
      y = bill_length_mm, 
      color = species)) +
  geom_point() +
  facet_grid(species ~ sex) +
  scale_color_viridis_d()
```

:::

## Facet and color, no legend

::: {.panel-tabset}

### Plot

```{r}
#| ref.label: facet-color-no-legend
#| echo: false
#| out-width: 70%
```

### Code

```{r}
#| label: facet-color-no-legend
#| fig-show: hide
#| code-line-numbers: "8"
ggplot(
  penguins, 
  aes(x = bill_depth_mm, 
      y = bill_length_mm, 
      color = species)) +
  geom_point() +
  facet_grid(species ~ sex) +
  scale_color_viridis_d(guide = "none")
```

:::

# Take a sad plot, and make it better

---

::: {.appex .small}
The American Association of 
University Professors (AAUP) is a nonprofit membership association of faculty 
and other academic professionals. 
[This report](https://www.aaup.org/sites/default/files/files/AAUP_Report_InstrStaff-75-11_apr2013.pdf) 
by the AAUP shows trends in instructional staff employees between 1975 
and 2011, and contains an image very similar to the one given below.
:::

```{r}
#| echo: false
include_graphics("images/02/staff-employment.png")
```

---

::: small
Each row in this dataset represents a faculty type, and the columns are the years for which we have data. 
The values are percentage of hires of that type of faculty for each year.

:::

```{r}
#| label: load-data-staff
staff <- read_csv("data/instructional-staff.csv")
staff
```

## Recreate the visualization

In order to recreate this visualization we need to first reshape the data to have one variable for faculty type and one variable for year. In other words, we will convert the data from the long format to wide format. 

But before we do so... 

::: appex
If the long data will have a row for each year/faculty type combination, and there are 5 faculty types and 11 years of data, how many rows will the data have?
:::

---

```{r}
#| echo: false
include_graphics("images/02/pivot.gif")
```

## `pivot_*()` function

```{r}
#| out-width: 50%
#| echo: false
include_graphics("https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/tidyr-pivoting.gif")
```

## `pivot_longer()`

```{r}
#| eval: false
pivot_longer(data, cols, names_to = "name", values_to = "value")
```

- The first argument is `data` as usual.
- The second argument, `cols`, is where you specify which columns to pivot 
into longer format -- in this case all columns except for the `faculty_type` 
- The third argument, `names_to`, is a string specifying the name of the column to create from the data stored in the column names of data -- in this case `year`
- The fourth argument, `values_to`, is a string specifying the name of the column to create from the data stored in cell values, in this case `percentage`

## Pivot instructor data

```{r}
library(tidyverse)

staff_long <- staff |>
  pivot_longer(cols = -faculty_type, names_to = "year", 
               values_to = "percentage") |>
  mutate(percentage = as.numeric(percentage))

staff_long
```

---

::: {.appex .small}
This doesn't look quite right, how would you fix it?
:::

::: {.small}

```{r}
#| fig-height: 2.0
staff_long |>
  ggplot(aes(x = percentage, y = year, color = faculty_type)) +
  geom_col(position = "dodge")
```

:::

---

::: {.small}

```{r}
#| fig-height: 2.0
staff_long |>
  ggplot(aes(x = percentage, y = year, fill = faculty_type)) +
  geom_col(position = "dodge")
```

:::

## Some improvement...

::: {.small}

```{r}
#| out-width: 60%
staff_long |>
  ggplot(aes(x = percentage, y = year, fill = faculty_type)) +
  geom_col()
```

:::

## More improvement

::: {.small}

```{r}
#| out-width: 100%
#| fig-asp: 0.4
#| fig-width: 7.0
staff_long |>
  ggplot(aes(x = year, y = percentage, group = faculty_type, 
             color = faculty_type)) +
  geom_line() +
  theme_minimal()
```

:::


## Goal: even more improvement!

::: appex
I want to achieve the following look but I have no idea how!
:::

```{r}
#| label: instructor-lines-for-show
#| echo: false
#| out-width: 60%
include_graphics("images/02/sketch.png")
```

## Asking good questions

- Describe what you want
- Describe where you are
- Create a minimal **repr**oducible **ex**ample: `reprex::reprex()`

---

::: {.panel-tabset}

### Plot

```{r}
#| ref.label: instructor-lines
#| echo: false
#| fig-width: 7.0
#| out-width: 100%
#| fig-asp: 0.5
```

### Code

::: small

```{r}
#| label: instructor-lines
#| fig-show: hide
#| code-line-numbers: "4-8,12-13,19"

library(scales)

staff_long |>
  mutate(
    part_time = if_else(faculty_type == "Part-Time Faculty",
                        "Part-Time Faculty", "Other Faculty"),
    year = as.numeric(year)
    ) |>
  ggplot(aes(x = year, y = percentage/100, group = faculty_type, 
             color = part_time)) +
  geom_line() +
  scale_color_manual(values = c("gray", "red")) +
  scale_y_continuous(labels = label_percent(accuracy = 1)) +
  theme_minimal() +
  labs(
    title = "Instructional staff employment trends",
    x = "Year", y = "Percentage", color = NULL
  ) +
  theme(legend.position = "bottom")
```

:::

:::
