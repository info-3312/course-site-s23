---
title: "Deep dive: stats + scales + guides"
subtitle: "Lecture 5"
date: "February 7, 2023"
format: revealjs
---

```{r}
#| label: setup
#| include: false
#| cache: false

source(here::here("slides", "_R", "slide-opts.R"))
```

# Project \#1

## Project \#1

- [Project description](/project-1.html)
- Team assignments on Thursday
- Deliverables
    - February 16 - proposals for peer review
    - February 20 - revised proposals for instructor review
    - March 3 - write-up and presentation

# Setup

## Packages + figures

```{r}
#| cache: false
# load packages
library(tidyverse)
library(rcis)

# set default theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))
```

### YAML options

```yaml
knitr:
  opts_chunk:
    fig.width: 7
    fig.asp: 0.618
    fig.retina: 2
    dpi: 150
    out.width: "80%"
```

## `scorecard`

```{r}
glimpse(scorecard)
```

# Stats

## Stats < > geoms {.smaller}

- Statistical transformation (**stat**) transforms the data, typically by summarizing
- Many of **ggplot2**â€™s stats are used behind the scenes to generate many important geoms

|`stat`            | `geom`              |
|------------------|-------------------|
|`stat_bin()`      | `geom_bar()`, `geom_freqpoly()`, `geom_histogram()` |
|`stat_bin2d()`    | `geom_bin2d()`    |
|`stat_bindot()`   | `geom_dotplot()`  |
|`stat_binhex()`   | `geom_hex()`      |
|`stat_boxplot()`  | `geom_boxplot()`  |
|`stat_contour()`  | `geom_contour()`  |
|`stat_quantile()` | `geom_quantile()` |
|`stat_smooth()`   | `geom_smooth()`   |
|`stat_sum()`      | `geom_count()`    |

## `stat_boxplot()`

```{r}
#| echo: false
#| fig.alt: Documentation for `stat_boxplot()`.
#| out.width: 90%
knitr::include_graphics("images/05/summary-stats.png")
```

## Layering with stats

```{r}
#| code-line-numbers: "3"

ggplot(scorecard, aes(x = type, y = avgfacsal)) +
  geom_point(alpha = 0.5) +
  stat_summary(geom = "point", fun = "median", color = "red", size = 5, pch = 4, stroke = 2)
```

## Alternate: layering with stats

```{r}
#| code-line-numbers: "3"

ggplot(scorecard, aes(x = type, y = avgfacsal)) +
  geom_point(alpha = 0.5) +
  geom_point(stat = "summary", fun = "median", color = "red", size = 5, pch = 4, stroke = 2)
```

## Statistical transformations

::: appex
What can you say about the distribution of average faculty salaries from the following QQ plot?
:::

```{r}
#| code-line-numbers: "2,3"
#| output-location: "column"
#| out.width: "100%"
#| fig-width: 5

ggplot(scorecard, aes(sample = avgfacsal)) +
  stat_qq() +
  stat_qq_line() +
  labs(y = "avgfacsal")
```

# Scales

## What is a scale?

- Each scale is a function from a region in data space (the domain of the scale) to a region in aesthetic space (the range of the scale)

- The axis or legend is the inverse function: it allows you to convert visual properties back to data

## Scale specification

Every aesthetic in your plot is associated with exactly one scale:

::: {.panel-tabset}

### Code

```{r}
#| fig.show: hide
# automatic scales
ggplot(scorecard, aes(x = pctpell, y = avgfacsal, color = type)) +
  geom_point(alpha = 0.8)

# manual scales
ggplot(scorecard, aes(x = pctpell, y = avgfacsal, color = type)) +
  geom_point(alpha = 0.8) +
  scale_x_continuous() +
  scale_y_continuous() +
  scale_color_ordinal()
```

### Plot

```{r}
#| echo: false
#| out.width: "60%"
ggplot(scorecard, aes(x = pctpell, y = avgfacsal, color = type)) +
  geom_point(alpha = 0.8)
```

:::

## Anatomy of a scale function

::: large
`scale_A_B()`
:::

- Always starts with `scale`
- `A`: Name of the primary aesthetic (e.g., `color`, `shape`, `x`)
- `B`: Name of the scale (e.g., `continuous`, `discrete`, `brewer`)

## Guess the output

::: appex
What will the **x**-axis label of the following plot say?
:::

```{r}
#| fig.show: hide
#| message: false
ggplot(scorecard, aes(x = pctpell, y = avgfacsal, color = type)) +
  geom_point(alpha = 0.8) +
  scale_x_continuous(name = "pctpell") +
  scale_x_continuous(name = "Percent of students receiving a Pell grant")
```

```{r}
#| echo: false
#| cache: false
countdown(minutes = 1, bottom = 0)
```

## "Address" messages

```{r}
#| message: true
#| output-location: column
#| out.width: "100%"
#| fig-width: 5

ggplot(scorecard, aes(x = pctpell, y = avgfacsal, color = type)) +
  geom_point(alpha = 0.8) +
  scale_x_continuous(name = "pctpell") +
  scale_x_continuous(name = "Percent of students receiving a Pell grant")
```

## Guess the output

::: appex
What happens if you pair a discrete variable with a continuous scale? What happens if you pair a continuous variable with a discrete scale? Answer in the context of the following plots.
:::

::: {.panel-tabset}

### Plots

:::: columns

::: column

```{r}
#| label: incorrect-scale-continuous
#| error: true
#| eval: false
#| code-line-numbers: "4,9"
ggplot(
  data = scorecard,
  mapping = aes(
    x = type,
    y = avgfacsal
  )
) +
  geom_point(alpha = 0.5) +
  scale_x_continuous()
```

:::

::: column

```{r}
#| label: incorrect-scale-discrete
#| eval: false
#| code-line-numbers: "5,9"
ggplot(
  data = scorecard,
  mapping = aes(
    x = type,
    y = avgfacsal
  )
) +
  geom_point(alpha = 0.5) +
  scale_y_discrete()
```

:::

::::

### Results

:::: columns

::: column

```{r}
#| ref.label: incorrect-scale-continuous
#| error: true
#| eval: true
#| echo: false
```

:::

::: column

```{r}
#| ref.label: incorrect-scale-discrete
#| eval: true
#| echo: false
#| out.width: "100%"
#| fig-width: 5
```

:::

::::

:::

```{r}
#| echo: false
#| cache: false
countdown(minutes = 3, bottom = 0)
```

## Transformations

When working with continuous data, the default is to map linearly from the data space onto the aesthetic space, but this scale can be transformed

::: {.panel-tabset}

### Linear

```{r}
#| output-location: column
#| out.width: "100%"
#| fig-width: 5
ggplot(
  scorecard,
  aes(x = pctpell, y = avgfacsal)
) +
  geom_point(alpha = 0.5)
```

### Transformed

```{r}
#| output-location: column
#| out.width: "100%"
#| fig-width: 5
#| code-line-numbers: "6"
ggplot(
  scorecard,
  aes(x = pctpell, y = avgfacsal)
) +
  geom_point(alpha = 0.5) +
  scale_y_continuous(trans = "log10")
```

:::

## Continuous scale transformations {.smaller}

| Name      | Function $f(x)$         | Inverse $f^{-1}(y)$
|-----------|-------------------------|------------------------
| asn       | $\tanh^{-1}(x)$         | $\tanh(y)$
| exp       | $e ^ x$                 | $\log(y)$
| identity  | $x$                     | $y$
| log       | $\log(x)$               | $e ^ y$
| log10     | $\log_{10}(x)$          | $10 ^ y$
| log2      | $\log_2(x)$             | $2 ^ y$
| logit     | $\log(\frac{x}{1 - x})$ | $\frac{1}{1 + e(y)}$
| pow10     | $10^x$                  | $\log_{10}(y)$
| probit    | $\Phi(x)$               | $\Phi^{-1}(y)$
| reciprocal| $x^{-1}$                | $y^{-1}$
| reverse   | $-x$                    | $-y$
| sqrt      | $x^{1/2}$               | $y ^ 2$

## Convenience functions for transformations

:::: columns

::: column

```{r}
#| code-line-numbers: "6"
#| out.width: "100%"
#| fig-width: 5

ggplot(
  scorecard,
  aes(x = pctpell, y = avgfacsal)
) +
  geom_point(alpha = 0.5) +
  scale_y_continuous(trans = "log10")
```

:::

::: column

```{r}
#| code-line-numbers: "6"
#| out.width: "100%"
#| fig-width: 5

ggplot(
  scorecard,
  aes(x = pctpell, y = avgfacsal)
) +
  geom_point(alpha = 0.5) +
  scale_y_log10()
```

:::

::::

## Scale transform vs. data transform

::: appex
How are the following two plots different, how are they similar? What does this say about how scale transformations work.
:::

::: {.panel-tabset}

### Plot A

```{r}
#| label: data-transform
#| output-location: column
#| out.width: "100%"
#| fig-width: 5
scorecard |>
  mutate(avgfacsal_log10 = log(avgfacsal, base = 10)) |>
  ggplot(aes(
    x = pctpell,
    y = avgfacsal_log10
  )) +
  geom_point(alpha = 0.5)
```

### Plot B

```{r}
#| label: scale-transform
#| output-location: column
#| out.width: "100%"
#| fig-width: 5
ggplot(
  scorecard,
  aes(x = pctpell, y = avgfacsal)
) +
  geom_point(alpha = 0.5) +
  scale_y_log10()
```

:::

```{r}
#| echo: false
#| cache: false
countdown(minutes = 2, bottom = 0, left = 0)
```

# Guides

## What is a guide?

Guides are legends and axes:

```{r}
#| echo: false
#| fig.alt: Common components of axes and legends
#| out.width: 80%
knitr::include_graphics("images/05/scale-guides.png")
```

::: footnote
Source: ggplot2: Elegant Graphics for Data Analysis, [Chp 15](https://ggplot2-book.org/scales-guides.html).
:::

## Customizing axes

```{r}
#| code-line-numbers: "4"
ggplot(scorecard, aes(x = netcost, y = avgfacsal)) +
  geom_point(alpha = 0.5) +
  scale_x_continuous(
    name = "Net cost of attendance"
  )
```

## Customizing axes

::: appex
Why does 60000 not appear on the x-axis?
:::

```{r}
#| output-location: column
#| out.width: "100%"
#| fig-width: 5
#| code-line-numbers: "5"
ggplot(scorecard, aes(x = netcost, y = avgfacsal)) +
  geom_point(alpha = 0.5) +
  scale_x_continuous(
    name = "Net cost of attendance",
    breaks = seq(from = 0, to = 60000, by = 10000)
  )
```

## Customizing axes

```{r}
#| output-location: column
#| out.width: "100%"
#| fig-width: 5
#| code-line-numbers: "6"
ggplot(scorecard, aes(x = netcost, y = avgfacsal)) +
  geom_point(alpha = 0.5) +
  scale_x_continuous(
    name = "Net cost of attendance",
    breaks = seq(from = 0, to = 60000, by = 10000),
    limits = c(0, 60000)
  )
```

## Customizing axes

```{r}
#| output-location: column
#| out.width: "100%"
#| fig-width: 5
#| code-line-numbers: "7"
ggplot(scorecard, aes(x = netcost, y = avgfacsal)) +
  geom_point(alpha = 0.5) +
  scale_x_continuous(
    name = "Net cost of attendance",
    breaks = seq(from = 0, to = 60000, by = 10000),
    limits = c(0, 60000),
    labels = c("$0", "$10,000", "$20,000", "$30,000", "$40,000", "$50,000", "$60,000")
  )
```

## Customizing axes

```{r}
#| output-location: column
#| out.width: "100%"
#| fig-width: 5
#| code-line-numbers: "1,9"
library(scales)

ggplot(scorecard, aes(x = netcost, y = avgfacsal)) +
  geom_point(alpha = 0.5) +
  scale_x_continuous(
    name = "Net cost of attendance",
    breaks = seq(from = 0, to = 60000, by = 10000),
    limits = c(0, 60000),
    labels = label_dollar()
  )
```

## Customizing axes

```{r}
#| output-location: column
#| out.width: "100%"
#| fig-width: 5
#| code-line-numbers: "7"
ggplot(scorecard, aes(x = netcost, y = avgfacsal)) +
  geom_point(alpha = 0.5) +
  scale_x_continuous(
    name = "Net cost of attendance",
    breaks = seq(from = 0, to = 60000, by = 10000),
    limits = c(0, 60000),
    labels = label_dollar(scale_cut = cut_short_scale())
  )
```

## Customizing axes

```{r}
#| output-location: column
#| out.width: "100%"
#| fig-width: 5
#| code-line-numbers: "9-12"
ggplot(scorecard, aes(x = netcost, y = avgfacsal)) +
  geom_point(alpha = 0.5) +
  scale_x_continuous(
    name = "Net cost of attendance",
    breaks = seq(from = 0, to = 60000, by = 10000),
    limits = c(0, 60000),
    labels = label_dollar(scale_cut = cut_short_scale())
  ) +
  scale_y_continuous(
    name = "Average faculty salary (USD)",
    labels = label_dollar(scale_cut = cut_short_scale())
  )
```

## Aside: storing a plot

```{r}
#| output-location: column
#| out.width: "100%"
#| fig-width: 5
set.seed(123)

p_pctpell_avgfacsal_type <- ggplot(
  scorecard,
  aes(x = pctpell, y = avgfacsal)
) +
  geom_jitter(
    aes(
      color = type,
      shape = type
    ),
    size = 2
  )
p_pctpell_avgfacsal_type
```

## Customizing axis and legend labels with `scale_*()`

```{r}
#| output-location: column
#| out.width: "100%"
#| fig-width: 5
#| code-line-numbers: "2-5"

p_pctpell_avgfacsal_type +
  scale_x_continuous(name = "Percent of students receiving a Pell grant") +
  scale_y_continuous(name = "Average faculty salary (USD)") +
  scale_color_discrete(name = "College type") +
  scale_shape_discrete(name = "College type")
```

## Customizing axis and legend labels with `labs()`

```{r}
#| output-location: column
#| out.width: "100%"
#| fig-width: 5
#| code-line-numbers: "2-7"

p_pctpell_avgfacsal_type +
  labs(
    x = "Percent of students receiving a Pell grant",
    y = "Average faculty salary (USD)",
    color = "College type",
    shape = "College type"
  )
```

## Splitting legend labels

```{r}
#| output-location: column
#| out.width: "100%"
#| fig-width: 5

p_pctpell_avgfacsal_type +
  labs(
    x = "Percent of students receiving a Pell grant",
    y = "Average faculty salary (USD)",
    color = "College type"
  )
```
