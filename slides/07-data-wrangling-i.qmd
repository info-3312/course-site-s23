---
title: "Data wrangling (I)"
subtitle: "Lecture 7"
date: "February 14, 2023"
format: revealjs
resources:
  - "data/scdb-case.csv"
---

```{r}
#| label: setup
#| include: false
#| cache: false

source(here::here("slides", "_R", "slide-opts.R"))
library(patchwork)
```

# Announcements

## Announcements

- Meet with your project \#1 teams
- Draft proposal rendered + committed + pushed to GitHub by 11:59pm on Thursday

## Agenda for today

- Transforming and reshaping a single data frame

# Setup

## Packages + figures

```{r}
#| cache: false
# load packages
library(tidyverse)
library(scales)

# set default theme for ggplot2
theme_set(theme_minimal(base_size = 12))
```

### YAML options

```yaml
knitr:
  opts_chunk:
    fig.width: 7
    fig.asp: 0.618
    fig.retina: 2
    dpi: 150
    out.width: "80%"
```

# Transforming and reshaping a single data frame

## Data: SCOTUS

-   Data from the Supreme Court of the United States
-   Source: [Supreme Court Database](http://scdb.wustl.edu/)
-   Observations: Each row represents a case

```{r}
#| eval: false
scdb_case <- read_csv("https://info3312.infosci.cornell.edu/slides/data/scdb-case.csv")
```

```{r}
#| label: scotus
#| include: false
scdb_case <- read_csv("data/scdb-case.csv")
```

## Scenario 1

::: hand
We...

have a single data frame

want to slice it, and dice it, and juice it, and process it, so we can plot it
:::

## **dplyr** 101

::: task
Which of the following (if any) are unfamiliar to you?
:::

-   `distinct()`
-   `select()`, `relocate()`
-   `arrange()`, `arrange(desc())`
-   `slice()`, `slice_head()`, `slice_tail()`, `slice_sample()`
-   `filter()`
-   `mutate()`
-   `summarize()`, `count()`

## What percentage of cases in each term are decided by an **n**-vote margin (i.e. 5-4, 6-3, etc.)

::: task
Let's recreate this visualization!
:::

```{r}
#| label: n-vote-margin
#| echo: false

scdb_case |>
  # select relevant columns
  select(term, majVotes, minVotes) |>
  # filter to include post 1945 term cases
  filter(term >= 1945) |>
  # calculate vote margin for each case
  mutate(vote_margin = majVotes - minVotes) |>
  # calculate number of cases decided per term and vote margin
  count(term, vote_margin) |>
  # fill in all the missing combination of rows - plot won't look right otherwise
  complete(term, vote_margin, fill = list(n = 0)) |>
  # calculate percentages by term
  group_by(term) |>
  mutate(
    n_pct = n / sum(n),
    # convert vote_margin to factor variable for plotting
    vote_margin = factor(x = vote_margin),
    vote_margin = fct_rev(f = vote_margin)
  ) |>
  # generate graph
  ggplot(mapping = aes(x = term, y = n_pct, fill = vote_margin)) +
  geom_area(color = "cornsilk4") +
  # print the y-axis labels using percentages rather than proportions
  scale_y_continuous(labels = label_percent()) +
  # change the color palette
  scale_fill_viridis_d() +
  # label our graph
  labs(
    title = "U.S. Supreme Court decisionmaking since 1945",
    subtitle = "Split between majority and minority justice votes",
    x = "Term",
    y = "Percent of total cases decided",
    fill = "Vote margin",
    caption = "Source: The Supreme Court Database"
  ) +
  # match subtitle and caption colors to area borders
  theme(
    plot.subtitle = element_text(color = "cornsilk4"),
    plot.caption = element_text(color = "cornsilk4")
  )
```

## Livecoding

Reveal below for code developed during live coding session.

```{r}
#| ref.label: n-vote-margin
#| fig-show: hide
#| code-fold: true
```
