---
title: "Deep dive: geoms"
subtitle: "Lecture 4"
date: "February 2, 2023"
format: revealjs
---

```{r}
#| label: setup
#| include: false
#| cache: false

source(here::here("slides", "_R", "slide-opts.R"))
```

## Announcements

- HW 1 will be posted tomorrow
- Post questions on the discussion forum

# Setup

## Packages

```{r}
# load packages
library(tidyverse)
# remotes::install_github("cis-ds/rcis")
library(rcis)
```


## **ggplot2** theme

```{r}
# set default theme for ggplot2
theme_set(theme_minimal(base_size = 14))
```

## Figure sizing

For more on including figures in Quarto documents with the right size, resolution, etc.

- [R for Data Science - Figures](https://r4ds.hadley.nz/quarto.html#sec-figures)
- Use the YAML header

```yaml
knitr:
  opts_chunk:
    fig.width: 7
    fig.asp: 0.618
    fig.retina: 2
    dpi: 150
    out.width: "80%"
```

---

## Data prep: new variables

From last class...

```{r}
scorecard <- scorecard |>
  mutate(pctpell_cat = cut_interval(x = pctpell, n = 6)) |>
  drop_na(pctpell_cat)

scorecard |>
  count(pctpell_cat)
```

---

## Data prep: summary table

From last class...

```{r}
mean_netcost_pctpell <- scorecard |>
  group_by(pctpell_cat) |>
  summarise(mean_netcost = mean(netcost, na.rm = TRUE))

mean_netcost_pctpell
```

# Aesthetic mappings in ggplot2

## Global vs. layer-specific aesthetics

- Aesthetic mappings can be supplied in the initial `ggplot()` call, in individual layers, or in some combination of both.

- Within each layer, you can add, override, or remove mappings.

- If you only have one layer in the plot, the way you specify aesthetics doesnâ€™t make any difference. However, the distinction is important when you start adding additional layers.

## Activity: Spot the difference I

::: appex
Do you expect the following plots to be the same or different? If different, how? Discuss in a pair (or group) without running the code and sketch the resulting plots based on what you think the code will produce.
:::

```{r}
#| fig.show: hide
# Plot A
ggplot(scorecard, aes(x = avgfacsal, y = netcost, color = pctpell_cat)) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE, size = 0.5)

# Plot B
ggplot(scorecard, aes(x = avgfacsal, y = netcost)) +
  geom_point(aes(color = pctpell_cat), alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE, size = 0.5)
```

```{r}
#| echo: false
#| cache: false
countdown(minutes = 2, bottom = 0)
```

---

## Activity: Spot the difference II

::: appex
Do you expect the following plots to be the same or different? If different, how? Discuss in a pair (or group) without running the code and sketch the resulting plots based on what you think the code will produce.
:::

```{r}
#| fig.show: hide
# Plot A
ggplot(scorecard, aes(x = avgfacsal, y = netcost)) +
  geom_point(aes(color = pctpell_cat))
```

```{r}
#| fig.show: hide
# Plot B
ggplot(scorecard, aes(x = avgfacsal, y = netcost)) +
  geom_point(color = "blue")
```

```{r}
#| fig.show: hide
# Plot C
ggplot(scorecard, aes(x = avgfacsal, y = netcost)) +
  geom_point(color = "#a493ba")
```

```{r}
#| echo: false
#| cache: false
countdown(minutes = 3, bottom = 0)
```

# Geoms

## Geoms

- Geometric objects, or geoms for short, perform the actual rendering of the layer, controlling the type of plot that you create

- You can think of them as "the geometric shape used to represent the data"

## One variable

- Discrete:
  - `geom_bar()`: display distribution of discrete variable.

- Continuous
  - `geom_histogram()`: bin and count continuous variable, display with bars
  - `geom_density()`: smoothed density estimate
  - `geom_dotplot()`: stack individual points into a dot plot
  - `geom_freqpoly()`: bin and count continuous variable, display with lines

---

## [aside...]{.hand}

Always use "typewriter text" (monospace font) when writing function names, and follow with `()`, e.g., 

- `geom_freqpoly()`
- `mean()`
- `lm()`

## `geom_bar()`

```{r}
ggplot(scorecard, aes(x = pctpell_cat)) +
  geom_bar()
```

## `geom_bar()`

```{r}
ggplot(scorecard, aes(y = pctpell_cat)) +
  geom_bar()
```

## `geom_histogram()`

```{r}
ggplot(scorecard, aes(x = netcost)) +
  geom_histogram()
```

## `geom_histogram()` and `binwidth`

::: {.panel-tabset}

### 2K

```{r}
#| fig-asp: 0.5
ggplot(scorecard, aes(x = netcost)) +
  geom_histogram(binwidth = 2000)
```

### 5K

```{r}
#| fig-asp: 0.5
ggplot(scorecard, aes(x = netcost)) +
  geom_histogram(binwidth = 5000)
```

### 10K

```{r}
#| fig-asp: 0.5
ggplot(scorecard, aes(x = netcost)) +
  geom_histogram(binwidth = 10000)
```

### 20K

```{r}
#| fig-asp: 0.5
ggplot(scorecard, aes(x = netcost)) +
  geom_histogram(binwidth = 20000)
```

:::

## `geom_density()`

```{r}
ggplot(scorecard, aes(x = netcost)) +
  geom_density()
```

## `geom_density()` and bandwidth (`bw`)

::: {.panel-tabset}

### 1

```{r}
#| fig-asp: 0.5
ggplot(scorecard, aes(x = netcost)) +
  geom_density(bw = 1)
```

### 100

```{r}
#| fig-asp: 0.5
ggplot(scorecard, aes(x = netcost)) +
  geom_density(bw = 100)
```

### 1,000

```{r}
#| fig-asp: 0.5
ggplot(scorecard, aes(x = netcost)) +
  geom_density(bw = 1000)
```

### 10,000

```{r}
#| fig-asp: 0.5
ggplot(scorecard, aes(x = netcost)) +
  geom_density(bw = 10000)
```

:::

## `geom_density()` outlines

::: {.panel-tabset}

### full

```{r}
#| fig-asp: 0.5
ggplot(scorecard, aes(x = netcost)) +
  geom_density(outline.type = "full")
```

### both

```{r}
#| fig-asp: 0.5
ggplot(scorecard, aes(x = netcost)) +
  geom_density(outline.type = "both")
```

### upper

```{r}
#| fig-asp: 0.5
ggplot(scorecard, aes(x = netcost)) +
  geom_density(outline.type = "upper")
```

### lower

```{r}
#| fig-asp: 0.5
ggplot(scorecard, aes(x = netcost)) +
  geom_density(outline.type = "lower")
```

:::

## `geom_dotplot()`

::: appex
What does each point represent? How are their locations determined? What do the x and y axes represent?
:::

```{r}
#| out-width: "100%"
ggplot(scorecard, aes(x = netcost)) +
  geom_dotplot(binwidth = 418)
```

```{r}
#| echo: false
#| cache: false
countdown(minutes = 2, bottom = 0)
```

## `geom_freqpoly()`

```{r}
ggplot(scorecard, aes(x = netcost)) +
  geom_freqpoly(binwidth = 1000)
```

## `geom_freqpoly()` for comparisons

::: {.panel-tabset}

### Histogram

```{r}
#| fig-asp: 0.5
ggplot(scorecard, aes(x = netcost, fill = pctpell_cat)) +
  geom_histogram(binwidth = 5000)
```

### Frequency polygon

```{r}
#| fig-asp: 0.5
ggplot(scorecard, aes(x = netcost, color = pctpell_cat)) +
  geom_freqpoly(binwidth = 5000, size = 1)
```

:::

## Two variables - both continuous

- `geom_point()`: scatterplot
- `geom_quantile()`: smoothed quantile regression
- `geom_rug()`: marginal rug plots
- `geom_smooth()`: smoothed line of best fit
- `geom_text()`: text labels

## `geom_rug()`

```{r}
ggplot(scorecard, aes(x = avgfacsal, y = netcost)) +
  geom_point() +
  geom_rug(alpha = 0.1)
```

## `geom_rug()` on the outside

```{r}
ggplot(scorecard, aes(x = avgfacsal, y = netcost)) +
  geom_point() +
  geom_rug(alpha = 0.1, outside = TRUE) +
  coord_cartesian(clip = "off")
```

## `geom_rug()` on the outside, but better

```{r}
ggplot(scorecard, aes(x = avgfacsal, y = netcost)) +
  geom_point() +
  geom_rug(alpha = 0.1, outside = TRUE, sides = "tr") +
  coord_cartesian(clip = "off") +
  theme(plot.margin = margin(1, 1, 1, 1, "cm"))
```

## `geom_text()`

```{r}
scorecard_samp <- sample_n(scorecard, size = 50) # for viz purposes

ggplot(scorecard_samp, aes(x = avgfacsal, y = netcost)) +
  geom_text(aes(label = type))
```

## `geom_text()` and more

```{r}
ggplot(scorecard_samp, aes(x = avgfacsal, y = netcost)) +
  geom_text(aes(label = type, color = type))
```

## `geom_text()` and even more

```{r}
ggplot(scorecard_samp, aes(x = avgfacsal, y = netcost)) +
  geom_text(aes(label = type, color = type),
    show.legend = FALSE
  )
```

## Two variables - show distribution

- `geom_bin2d()`: bin into rectangles and count
- `geom_density2d()`: smoothed 2d density estimate
- `geom_hex()`: bin into hexagons and count

## `geom_hex()`

```{r}
ggplot(scorecard, aes(x = avgfacsal, y = netcost)) +
  geom_hex()
```

## `geom_hex()` and warnings

- Requires installing the [**hexbin**](https://cran.r-project.org/web/packages/hexbin/index.html) package separately!

```{r}
#| eval: false
install.packages("hexbin")
```

- Otherwise you might see

```
Warning: Computation failed in `stat_binhex()`
```

## Two variables

- At least one discrete
  - `geom_count()`: count number of point at distinct locations
  - `geom_jitter()`: randomly jitter overlapping points

- One continuous, one discrete
  - `geom_col()`: a bar chart of pre-computed summaries
  - `geom_boxplot()`: boxplots
  - `geom_violin()`: show density of values in each group

## `geom_jitter()`

::: appex
How are the following three plots different?
:::

::: {.panel-tabset}

### Plot A

```{r}
#| fig.asp: 0.4
ggplot(scorecard, aes(x = type, y = netcost)) +
  geom_point()
```

### Plot B

```{r}
#| fig.asp: 0.4
ggplot(scorecard, aes(x = type, y = netcost)) +
  geom_jitter()
```

### Plot C

```{r}
#| fig.asp: 0.4
ggplot(scorecard, aes(x = type, y = netcost)) +
  geom_jitter()
```

:::

```{r}
#| echo: false
#| cache: false
countdown(minutes = 3, bottom = 0)
```

## `geom_jitter()` and `set.seed()`

::: {.panel-tabset}

### Plot A

```{r}
#| fig.asp: 0.5
set.seed(123)
ggplot(scorecard, aes(x = type, y = netcost)) +
  geom_jitter()
```

### Plot B

```{r}
#| fig.asp: 0.5
set.seed(123)
ggplot(scorecard, aes(x = type, y = netcost)) +
  geom_jitter()
```

### Plot C

```{r}
#| fig.asp: 0.5
set.seed(234)
ggplot(scorecard, aes(x = type, y = netcost)) +
  geom_jitter()
```

:::

## Two variables

- One time, one continuous
  - `geom_area()`: area plot
  - `geom_line()`: line plot
  - `geom_step()`: step plot

- Display uncertainty:
  - `geom_crossbar()`: vertical bar with center
  - `geom_errorbar()`: error bars
  - `geom_linerange()`: vertical line
  - `geom_pointrange()`: vertical line with center

- Spatial
  - `geom_sf()`: for map data (more on this later...)

## Average net cost per Pell grant recipient

```{r}
mean_netcost_pctpell <- scorecard |>
  mutate(pctpell = round(pctpell, digits = 2)) |>
  group_by(pctpell) |>
  summarise(
    n = n(),
    mean_netcost = mean(netcost),
    sd_netcost = sd(netcost)
  ) |>
  drop_na(mean_netcost)

mean_netcost_pctpell
```

## `geom_line()`

```{r}
ggplot(mean_netcost_pctpell, aes(x = pctpell, y = mean_netcost)) +
  geom_line()
```


## `geom_area()`

```{r}
ggplot(mean_netcost_pctpell, aes(x = pctpell, y = mean_netcost)) +
  geom_area()
```

## `geom_step()`

```{r}
ggplot(mean_netcost_pctpell, aes(x = pctpell, y = mean_netcost)) +
  geom_step()
```

## `geom_errorbar()`

::: appex
Describe how this plot is constructed and what the points and the lines (error bars) correspond to.
:::

::: {.panel-tabset}

### Code

```{r}
#| label: errorbar
#| fig-show: hide
ggplot(mean_netcost_pctpell, aes(x = pctpell, y = mean_netcost)) +
  geom_point() +
  geom_errorbar(aes(
    ymin = mean_netcost - sd_netcost,
    ymax = mean_netcost + sd_netcost
  ))
```

### Plot

```{r}
#| ref.label: errorbar
#| echo: false
#| fig-asp: 0.45
```

:::

```{r}
#| echo: false
#| cache: false
countdown(minutes = 3, bottom = 0)
```


## Let's clean things up a bit!

Meet your new best friend, the [**scales**](https://scales.r-lib.org/) package!

```{r}
library(scales)
```

## Let's clean things up a bit!

::: {.panel-tabset}

### Plot

```{r}
#| label: scales-clean
#| fig-show: hold
#| echo: false
#| fig-asp: 0.5
ggplot(scorecard, aes(x = avgfacsal, y = netcost)) +
  geom_point(alpha = 0.4, size = 2, color = "#012169") +
  scale_x_continuous(labels = label_number(big.mark = ",")) +
  scale_y_continuous(labels = label_dollar()) +
  labs(
    x = "Average faculty salary (USD)",
    y = "Net cost of attendance (USD)",
    title = "Faculty salaries and net cost of attendance in US universities",
    subtitle = "2020-21",
    caption = "Source: College Scorecard"
  )
```

### Code

```{r}
#| ref.label: scales-clean
#| echo: true
#| fig-show: hide
```

:::

# geoms

## Three variables

- `geom_tile()`: tile the plane with rectangles
- `geom_raster()`: fast version of `geom_tile()` for equal sized tiles

## `geom_tile()`

```{r}
ggplot(scorecard, aes(x = type, y = locale)) +
 geom_tile(aes(fill = netcost))
```

## Another look at smooth-ish surface

::: {.panel-tabset}

### Summarize {.smaller}

```{r}
mean_netcost_type_locale <- scorecard |>
  group_by(type, locale) |>
  summarize(mean_netcost = mean(netcost, na.rm = TRUE), .groups = "drop")

mean_netcost_type_locale
```

### Plot

```{r}
#| fig-asp: 0.5
ggplot(mean_netcost_type_locale, aes(x = type, y = locale)) +
  geom_point(aes(color = mean_netcost), size = 30, pch = "square")
```

:::

## Activity: Pick a geom

::: appex
For each of the following problems, suggest a useful geom:

1. Display how the value of variable has changed over time
1. Show the detailed distribution of a single continuous variable
1. Focus attention on the overall relationship between two variables in a large dataset
1. Label outlying points in a single variable
:::

```{r}
#| echo: false
#| cache: false
countdown(minutes = 3, bottom = 0)
```
